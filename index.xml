<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Muxuan - An .net developer</title>
    <link>https://muxuanuser.github.io/</link>
    <description>Recent content on Muxuan - An .net developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 Mar 2018 15:43:48 +0800</lastBuildDate>
    
        <atom:link href="https://muxuanuser.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ionic 使用 webrtc</title>
      <link>https://muxuanuser.github.io/post/201803/ionic-webrtc/ionic-webrtc/</link>
      <pubDate>Thu, 08 Mar 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201803/ionic-webrtc/ionic-webrtc/</guid>
      
        <description>

&lt;h2 id=&#34;ionic-使用-webrtc&#34;&gt;ionic 使用 webrtc&lt;/h2&gt;

&lt;p&gt;WebRTC实现了基于网页的视频会议，标准是WHATWG 协议，目的是通过浏览器提供简单的javascript就可以达到实时通讯（Real-Time Communications (RTC)）能力。
WebRTC（Web Real-Time Communication）项目的最终目的主要是让Web开发者能够基于浏览器（Chrome\FireFox...）轻易快捷开发出丰富的实时多媒体应用，而无需下载安装任何插件，Web开发者也无需关注多媒体的数字信号处理过程，只需编写简单的Javascript程序即可实现，W3C等组织正在制定Javascript 标准API，目前是WebRTC 1.0版本，Draft状态；另外WebRTC还希望能够建立一个多互联网浏览器间健壮的实时通信的平台，形成开发者与浏览器厂商良好的生态环境。同时，Google也希望和致力于让WebRTC的技术成为HTML5标准之一，可见Google布局之深远。
WebRTC提供了视频会议的核心技术，包括音视频的采集、编解码、网络传输、显示等功能，并且还支持跨平台：windows，linux，mac，android。 &amp;mdash; &lt;a href=&#34;https://baike.baidu.com/item/WebRTC/5522744?fr=aladdin&#34;&gt;百度百科&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;官网：&lt;a href=&#34;www.webrtc.ort&#34;&gt;www.webrtc.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;实现qq电话功能&#34;&gt;实现QQ电话功能&lt;/h3&gt;

&lt;p&gt;本节介绍如何使用ionic + webrtc使用rtcmulticonnection组件实现QQ电话功能。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&#34;http://www.rtcmulticonnection.org/&#34;&gt;http://www.rtcmulticonnection.org/&lt;/a&gt;
Github：&lt;a href=&#34;https://github.com/muaz-khan/RTCMultiConnection&#34;&gt;https://github.com/muaz-khan/RTCMultiConnection&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;引用脚本&#34;&gt;引用脚本&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;!-- WebRTC 引用 --&amp;gt;
  &amp;lt;script src=&amp;quot;https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- &amp;lt;script src=&amp;quot;assets/js/getHtmlMediaElement.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
  &amp;lt;script src=&amp;quot;assets/js/getMediaElement.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;html代码&#34;&gt;html代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;视频聊天界面&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content padding&amp;gt;
  &amp;lt;div id=&amp;quot;videos-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/ion-content&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;typescript代码&#34;&gt;Typescript代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;
declare var RTCMultiConnection;
declare var MediaHelper;

@IonicPage()
@Component({
  selector: &#39;page-video-running&#39;,
  templateUrl: &#39;video-running.html&#39;,
})
export class VideoRunningPage {

  mediaHelper: any;
  connection: any;
  constructor(public navCtrl: NavController, public navParams: NavParams) {
  }

  ionViewDidLoad() {
    this.mediaHelper = new MediaHelper();
    this.connection = new RTCMultiConnection();
    this.doWork();
  }

  doWork(): void {
    //数据配置
    this.connection.socketURL = &#39;https://rtcmulticonnection.herokuapp.com:443/&#39;;
    // comment-out below line if you do not have your own socket.io server
    // connection.socketURL = &#39;https://rtcmulticonnection.herokuapp.com:443/&#39;;
    this.connection.socketMessageEvent = &#39;video-conference-demo&#39;;
    this.connection.session = {
      audio: true,
      video: true
    };
    this.connection.maxParticipantsAllowed = 1;
    this.connection.sdpConstraints.mandatory = {
      OfferToReceiveAudio: true,
      OfferToReceiveVideo: true
    };
    this.connection.videosContainer = document.getElementById(&#39;videos-container&#39;);

    this.connection.onstream = (event) =&amp;gt; {
      if (event.type == &#39;local&#39;) {
        event.stream.muted = true;
      }

      var width = 200;//parseInt(connection.videosContainer.clientWidth / 2) - 20;
      var mediaElement = this.mediaHelper.getMedia(event.mediaElement, {
        title: event.userid,
        buttons: [&#39;full-screen&#39;],
        width: width,
        showOnMouseEnter: false
      });
      this.connection.videosContainer.appendChild(mediaElement);
      setTimeout(() =&amp;gt; {
        mediaElement.media.play();
      }, 5000);
      mediaElement.id = event.streamid;
    };

    this.connection.onstreamended = (event) =&amp;gt; {
      var mediaElement = document.getElementById(event.streamid);
      if (mediaElement) {
        mediaElement.parentNode.removeChild(mediaElement);
      }
    };
    this.connection.openOrJoin(&amp;quot;15700000000&amp;quot;, (isRoomExists, roomid) =&amp;gt; {
      if (!isRoomExists) {
        console.log(roomid);
      }
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;效果&#34;&gt;效果&lt;/h4&gt;

&lt;p&gt;![&amp;lsquo;效果&amp;rsquo;](&amp;lsquo;&lt;a href=&#34;https://ycdn.lucoder.com/usr/muxuanuser.github.io/201803/201803262.png&#39;&#34;&gt;https://ycdn.lucoder.com/usr/muxuanuser.github.io/201803/201803262.png&#39;&lt;/a&gt;)&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ionic 融入百度地图</title>
      <link>https://muxuanuser.github.io/post/201803/ionic%E8%9E%8D%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/ionic%E8%9E%8D%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Thu, 08 Mar 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201803/ionic%E8%9E%8D%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/ionic%E8%9E%8D%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</guid>
      
        <description>

&lt;h2 id=&#34;ionic-融入百度地图&#34;&gt;ionic 融入百度地图&lt;/h2&gt;

&lt;p&gt;百度地图是一个非常成熟的一个地图组件，在很多项目中都会用到百度地图组件，本节就介绍如何在ionic项目中使用百度地图。&lt;/p&gt;

&lt;h4 id=&#34;在index-html中添加引用&#34;&gt;在index.html中添加引用&lt;/h4&gt;

&lt;p&gt;在ionic的&lt;code&gt;index.html&lt;/code&gt;文件中添加script引用脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://api.map.baidu.com/api?v=2.0&amp;amp;ak=your key&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;引入百度地图&#34;&gt;引入百度地图&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import {Platform, IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;

//百度地图API需要先这样声明一下，声明以后就可以使用了
declare var BMap: any;

@IonicPage()
@Component({
  selector: &#39;page-map-demos&#39;,
  templateUrl: &#39;map-demos.html&#39;,
})
export class MapDemosPage {
  constructor(public navCtrl: NavController,public navParams: NavParams) {
  }

  ionViewDidLoad() {
    // 创建百度地图API的Map实例
    let map = new BMap.Map(&#39;map&#39;);
    // 初始化地图,设置中心点坐标（河大计算机学院门前路上）和地图级别（11）
    map.centerAndZoom(new BMap.Point(114.315745, 34.824635), 11);
    //添加地图类型控件
    map.addControl(new BMap.MapTypeControl());
    // 设置地图显示的城市 此项是必须设置的
    map.setCurrentCity(&amp;quot;开封&amp;quot;);
    //开启鼠标滚轮缩放，默认false
    map.enableScrollWheelZoom(true);
  }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>基于LocalSortage实现Web临时数据库</title>
      <link>https://muxuanuser.github.io/post/201803/%E5%9F%BA%E4%BA%8Elocalsortage%E5%AE%9E%E7%8E%B0%E7%9A%84web%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 08 Mar 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201803/%E5%9F%BA%E4%BA%8Elocalsortage%E5%AE%9E%E7%8E%B0%E7%9A%84web%E6%95%B0%E6%8D%AE/</guid>
      
        <description>

&lt;h2 id=&#34;基于localsortage实现的web临时数据库&#34;&gt;基于LocalSortage实现的web临时数据库&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;该数据库基于localStorage的一个封装，实现键值对的存入和键值的取出，支持跨页面数据保存。该封装是团队内部使用的封装，不保证通用性以及bug的出现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;用途&#34;&gt;用途&lt;/h3&gt;

&lt;p&gt;可以用于临时保存登陆用户的数据，不必重复回发请求服务器。&lt;/p&gt;

&lt;h3 id=&#34;javscript代码&#34;&gt;Javscript代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//本地数据库
var LocalDb = function () {
    var db = [];
    this.print = function () {
        console.log(db);
    }
    this.add = function (key, value) {
        if (this.exist(key)) {
            console.log(&amp;quot;键入重复数据！&amp;quot;);
            return;
        }
        var json = { &amp;quot;key&amp;quot;: key, &amp;quot;value&amp;quot;: value }
        db.push(json);
    }
    this.remove = function (key) {
        var index = -1;
        for (var i = 0; i &amp;lt; db.length; i++) {
            if (db[i].key == key) {
                index = i;
            }
        }

        if (index == -1) return;
        else db[index] = null;
    }
    this.get = function (key) {
        for (var i = 0; i &amp;lt; db.length; i++) {
            if (db[i].key == key) return db[i].value;
        }
    }
    this.index = function (index) {
        return db[index];
    }
    this.exist = function (key) {
        for (var i = 0; i &amp;lt; db.length; i++) {
            if (db[i].key == key) return true;
        }
    }
    this.load = function (name) {
        if (window.localStorage) {//判断浏览器是否支持 localStorage
            var ls = window.localStorage;
            db = JSON.parse(ls.getItem(&amp;quot;mx_web_db_sortager&amp;quot;));//设置值
        } else {
            console.log(&#39;浏览器不支持 localStorage&#39;);
        }
    }
    this.write = function (name, expiredays) {
        if (window.localStorage) {//判断浏览器是否支持 localStorage
            var ls = window.localStorage;
            ls.setItem(&amp;quot;mx_web_db_sortager&amp;quot;, JSON.stringify(db));//设置值
        } else {
            console.log(&#39;浏览器不支持 localStorage&#39;);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;未来扩展&#34;&gt;未来扩展&lt;/h3&gt;

&lt;p&gt;使用dom的cookie保存数据，可以保证较长时间的存储。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>树莓派安装Node js</title>
      <link>https://muxuanuser.github.io/post/201802/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85node/</link>
      <pubDate>Thu, 22 Feb 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201802/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85node/</guid>
      
        <description>

&lt;h2 id=&#34;树莓派安装node环境&#34;&gt;树莓派安装node环境&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;下载node包
&amp;gt; &lt;a href=&#34;https://npm.taobao.org/mirrors/node/&#34;&gt;https://npm.taobao.org/mirrors/node/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我选择的是&lt;code&gt;node-v9.5.0-linux-armv7l.tar.gz&lt;/code&gt;，当然可以选择其他版本，但是注意是&lt;code&gt;arm版本&lt;/code&gt;即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;wget https://npm.taobao.org/mirrors/node/v9.5.0/node-v9.5.0-linux-armv7l.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;解压node包&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;tar -zxvf node-v9.5.0-linux-armv7l.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;复制到&lt;code&gt;/usr/&lt;/code&gt;目录里面&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;sudo cp -rvi node-v9.5.0-linux-armv7l /usr/
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;添加链接&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先切换到&lt;code&gt;/usr/bin&lt;/code&gt;目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;sudo ln -s ../node-v9.5.0-linux-armv7l/lib/node_modules/npm/bin/npm-cli.js
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;测试结果
&lt;code&gt;code
pi@raspberrypi:~ $ npm -v
5.6.0
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Java SSM框架报错Dynamic_Web_Module....</title>
      <link>https://muxuanuser.github.io/post/201802/dynamic_web_module_3.0_require_1.6_or_newer/</link>
      <pubDate>Wed, 14 Feb 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201802/dynamic_web_module_3.0_require_1.6_or_newer/</guid>
      
        <description>

&lt;h2 id=&#34;动态网站模块错误&#34;&gt;动态网站模块错误&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/2018/02/201802272217.png&#34; alt=&#34;&#39;错误&#39;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Dynamic Web Module 3.0 Require 1.6 Or Newer。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改&lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;build&amp;gt;  
        &amp;lt;plugins&amp;gt;  
            &amp;lt;plugin&amp;gt;  
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;  
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;  
                &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;  
                &amp;lt;configuration&amp;gt;  
                    &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;  
                    &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;  
                &amp;lt;/configuration&amp;gt;  
            &amp;lt;/plugin&amp;gt;  
        &amp;lt;/plugins&amp;gt;  
    &amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Java中搭建SSM框架</title>
      <link>https://muxuanuser.github.io/post/201802/java%E4%B8%AD%E7%9A%84ssm%E6%A1%86%E6%9E%B6%E5%92%8C%E9%85%8D%E7%BD%AE/java%E4%B8%AD%E7%9A%84ssm%E6%A1%86%E6%9E%B6%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 11 Feb 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201802/java%E4%B8%AD%E7%9A%84ssm%E6%A1%86%E6%9E%B6%E5%92%8C%E9%85%8D%E7%BD%AE/java%E4%B8%AD%E7%9A%84ssm%E6%A1%86%E6%9E%B6%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      
        <description>

&lt;h2 id=&#34;一-什么是ssm框架&#34;&gt;一、什么是SSM框架&lt;/h2&gt;

&lt;p&gt;SSM框架是JavaWeb中常用的框架，包括&lt;code&gt;Spring&lt;/code&gt;、&lt;code&gt;Spring MVC&lt;/code&gt;、&lt;code&gt;Mybatis&lt;/code&gt;三种框架的一个整合。其中任意两个框架都可以相互组合&lt;code&gt;SS框架&lt;/code&gt;、&lt;code&gt;SM&lt;/code&gt;（O(∩_∩)O~）框架（两种情况：&lt;code&gt;Spring + Mybatis&lt;/code&gt;、&lt;code&gt;Spring MVC + Mybatis&lt;/code&gt;）。具体的详细情况可以参考这篇文章&lt;a href=&#39;http://blog.csdn.net/daniel_fei/article/details/56670751&#39; target=&#39;_blank&#39;&gt;&lt;a href=&#34;http://blog.csdn.net/daniel_fei/article/details/56670751&#34;&gt;http://blog.csdn.net/daniel_fei/article/details/56670751&lt;/a&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;框架基本结构&#34;&gt;框架基本结构&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;-       |----controllers  控制器
|       |----dao          dao层
|       |----mapper       mybatis的mapper文件
|--src--|----pojo         简单java对象
|       |----service      服务层
|       |----service.impl 服务实现层
|
|
|               |----jdbc.properties    jdbc配置
|               |----log4j.properties   log4j配置
|-- resources --|----spring-mvc.xml     springmvc配置
|               |----spring-mybatis.xml spring整合mybatis配置
|   
|---|Deployed Resources     部署资源文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图片&lt;/p&gt;

&lt;h2 id=&#34;框架整合过程&#34;&gt;框架整合过程&lt;/h2&gt;

&lt;p&gt;创建一个&lt;code&gt;maven&lt;/code&gt;的网站项目(不要问为什么)，然后按照下面步骤配置。
1. 数据库初始化
&amp;gt; 请预先整理好数据库，我这里使用的MariaDB(mysql)，也可以使用其他数据库。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;--mysql-connctor-java 5.1.32
DROP TABLE IF EXISTS `user_t`;  
  
CREATE TABLE `user_t` (  
  `id` int(11) NOT NULL AUTO_INCREMENT,  
  `user_name` varchar(40) NOT NULL,  
  `password` varchar(255) NOT NULL,  
  `age` int(4) NOT NULL,  
  PRIMARY KEY (`id`)  
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;  
  
insert  into `user_t`(`id`,`user_name`,`password`,`age`) values (1,&#39;测试&#39;,&#39;sfasgfaf&#39;,24);  

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;maven配置文件
&amp;gt; 下面的是maven项目的&lt;code&gt;pom.xml&lt;/code&gt;文件配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;  
        &amp;lt;!-- spring版本号 --&amp;gt;  
        &amp;lt;spring.version&amp;gt;4.0.2.RELEASE&amp;lt;/spring.version&amp;gt;  
        &amp;lt;!-- mybatis版本号 --&amp;gt;  
        &amp;lt;mybatis.version&amp;gt;3.2.6&amp;lt;/mybatis.version&amp;gt;  
        &amp;lt;!-- log4j日志文件管理包版本 --&amp;gt;  
        &amp;lt;slf4j.version&amp;gt;1.7.7&amp;lt;/slf4j.version&amp;gt;  
        &amp;lt;log4j.version&amp;gt;1.2.17&amp;lt;/log4j.version&amp;gt;  
    &amp;lt;/properties&amp;gt;  
    &amp;lt;dependencies&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt;  
            &amp;lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&amp;gt;  
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- spring核心包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-oxm&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- mybatis核心包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${mybatis.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- mybatis/spring包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 导入java ee jar 包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;javax&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;javaee-api&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;7.0&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 导入Mysql数据库链接jar包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;5.1.30&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- JSTL标签类 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;jstl&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 日志文件管理包 --&amp;gt;  
        &amp;lt;!-- log start --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${log4j.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 格式化对象，方便输出日志 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.1.41&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- log end --&amp;gt;  
        &amp;lt;!-- 映入JSON --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.9.13&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 上传组件包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.9&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt; 
    &amp;lt;/dependencies&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;properties配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先是jdbc的配置&lt;code&gt;jdbc.properties&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;driver=com.mysql.jdbc.Driver
url=jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=UTF-8
username=testroot
password=123
#定义初始连接数
initialSize=0
#定义最大连接数
maxActive=20
#定义最大空闲
maxIdle=20
#定义最小空闲
minIdle=1
#定义最长等待时间
maxWait=60000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后是log4j的配置&lt;code&gt;log4j.properties&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;#定义LOG输出级别
log4j.rootLogger=INFO,Console,File
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n

#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File = logs/springmvcMybist/ssm.log
#定义文件最大大小
log4j.appender.File.MaxFileSize = 10MB
#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold = ALL
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;spring-mybatis整合
&amp;gt; 文件名为&lt;code&gt;spring-mybatis.xml&lt;/code&gt;，注意文件的位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot;
xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans  
                    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                    http://www.springframework.org/schema/context  
                    http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                    http://www.springframework.org/schema/mvc  
                    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&amp;quot;&amp;gt;
&amp;lt;!-- 这里的 base-package 需要修改，修改为你所需要的即可 --&amp;gt;
&amp;lt;!-- 自动扫描 --&amp;gt;
&amp;lt;context:component-scan base-package=&amp;quot;com.mxcms&amp;quot; /&amp;gt;

&amp;lt;!-- 引入配置文件 --&amp;gt;
&amp;lt;bean id=&amp;quot;propertyConfigurer&amp;quot;
    class=&amp;quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;location&amp;quot; value=&amp;quot;classpath:jdbc.properties&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;
    destroy-method=&amp;quot;close&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${driver}&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${url}&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${username}&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${password}&amp;quot; /&amp;gt;
    &amp;lt;!-- 初始化连接大小 --&amp;gt;
    &amp;lt;property name=&amp;quot;initialSize&amp;quot; value=&amp;quot;${initialSize}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 连接池最大数量 --&amp;gt;
    &amp;lt;property name=&amp;quot;maxActive&amp;quot; value=&amp;quot;${maxActive}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 连接池最大空闲 --&amp;gt;
    &amp;lt;property name=&amp;quot;maxIdle&amp;quot; value=&amp;quot;${maxIdle}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 连接池最小空闲 --&amp;gt;
    &amp;lt;property name=&amp;quot;minIdle&amp;quot; value=&amp;quot;${minIdle}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 获取连接最大等待时间 --&amp;gt;
    &amp;lt;property name=&amp;quot;maxWait&amp;quot; value=&amp;quot;${maxWait}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&amp;gt;
&amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
    &amp;lt;!-- 这里的value需要修改为你的mapper文件位置，注意这里是斜线 / 不是 . --&amp;gt;
    &amp;lt;!-- 自动扫描mapping.xml文件 --&amp;gt;
    &amp;lt;property name=&amp;quot;mapperLocations&amp;quot; value=&amp;quot;classpath:com/mxcms/mapper/*.xml&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;!-- 这里的value需要修改为你的dao文件夹位置 --&amp;gt;
&amp;lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&amp;gt;
&amp;lt;bean class=&amp;quot;org.mybatis.spring.mapper.MapperScannerConfigurer&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;basePackage&amp;quot; value=&amp;quot;com.mxcms.dao&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;sqlSessionFactoryBeanName&amp;quot; value=&amp;quot;sqlSessionFactory&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&amp;gt;
&amp;lt;bean id=&amp;quot;transactionManager&amp;quot;
    class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;maven 自动生成代码&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面需要使用maven自动生成工具生成代码，可以&lt;/p&gt;

&lt;p&gt;下载&lt;/p&gt;

&lt;p&gt;压缩包，解压文件，然后按照下面方法进行自动生成代码。&lt;/p&gt;

&lt;p&gt;(1). 准备好你的下面的文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mybatis-3.2.7.jar
mybatis-generator-core-1.3.2.jar
mysql-connector-java-5.1.25-bin.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(2). 修改自动生成代码配置文件&lt;/p&gt;

&lt;p&gt;修改配置文件&lt;code&gt;generatorConfig.xml&lt;/code&gt;的相关内容，准备生成代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;  
&amp;lt;!DOCTYPE generatorConfiguration  
  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;  
  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;  
&amp;lt;generatorConfiguration&amp;gt;  
&amp;lt;!-- 数据库驱动--&amp;gt;  
    &amp;lt;classPathEntry  location=&amp;quot;mysql-connector-java-5.1.25-bin.jar&amp;quot;/&amp;gt;  
    &amp;lt;context id=&amp;quot;DB2Tables&amp;quot;  targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;  
        &amp;lt;commentGenerator&amp;gt;  
            &amp;lt;property name=&amp;quot;suppressDate&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
            &amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;  
            &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
        &amp;lt;/commentGenerator&amp;gt; 
        &amp;lt;!-- 这里的连接字符串需要修改为你的真实可用字符串。 --&amp;gt; 
        &amp;lt;!--数据库链接URL，用户名、密码 --&amp;gt;  
        &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot; connectionURL=&amp;quot;jdbc:mysql://127.0.0.1/mybatis&amp;quot; userId=&amp;quot;testroot&amp;quot; password=&amp;quot;123&amp;quot;&amp;gt;  
        &amp;lt;/jdbcConnection&amp;gt;  
        &amp;lt;javaTypeResolver&amp;gt;  
            &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;
        &amp;lt;/javaTypeResolver&amp;gt;  
        &amp;lt;!-- 这里需要修改这个文件夹名称 --&amp;gt;
        &amp;lt;!-- 生成模型的包名和位置--&amp;gt;
        &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.mxcms.pojo&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;  &amp;lt;!--这个targetPackage需要修改--&amp;gt;
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
            &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
        &amp;lt;/javaModelGenerator&amp;gt;  
        &amp;lt;!--这个targetPackage需要修改--&amp;gt;
        &amp;lt;!-- 生成映射文件的包名和位置--&amp;gt;  
        &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.mxcms.mapper&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;  
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
        &amp;lt;/sqlMapGenerator&amp;gt;  
        &amp;lt;!--这个targetPackage需要修改--&amp;gt;
        &amp;lt;!-- 生成DAO的包名和位置--&amp;gt;  
        &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot; targetPackage=&amp;quot;com.mxcms.dao&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;  
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/javaClientGenerator&amp;gt;  
        &amp;lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&amp;gt;  
        &amp;lt;table tableName=&amp;quot;user_t&amp;quot; domainObjectName=&amp;quot;User&amp;quot; enableCountByExample=&amp;quot;false&amp;quot; enableUpdateByExample=&amp;quot;false&amp;quot; enableDeleteByExample=&amp;quot;false&amp;quot; enableSelectByExample=&amp;quot;false&amp;quot; selectByExampleQueryId=&amp;quot;false&amp;quot;&amp;gt;&amp;lt;/table&amp;gt;
    &amp;lt;/context&amp;gt;  
&amp;lt;/generatorConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3). 制作一个bat脚本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;IF NOT EXIST &amp;quot;src&amp;quot; MD &amp;quot;src&amp;quot;

java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite

pause();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(4). 生成代码&lt;/p&gt;

&lt;p&gt;将上面的所有文件放到一个文件夹中，然后运行bat文件，将会自动生成代码。
&amp;gt; 注意:表配置请务必一次写完，虽然中途仍然可以自动生成并复制，建议一次性设计好数据库和关系。&lt;/p&gt;

&lt;p&gt;(5). 复制代码&lt;/p&gt;

&lt;p&gt;将上面的所有代码复制到&lt;code&gt;src/main/java&lt;/code&gt;下面即可。
&amp;gt; 一个错误信息：&lt;/p&gt;

&lt;p&gt;你或许会遇到下面的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先检验一下你的路径是否正确，如果确保路径正确，可以尝试将&lt;code&gt;mapper&lt;/code&gt;文件夹放到&lt;code&gt;resource&lt;/code&gt;中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;实现service&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;到此为止dao层做好了，下面开始做服务层。&lt;/p&gt;

&lt;p&gt;(1) 创建service接口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IUserService {
    public User getUserById(int userId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(2). 实现接口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service(&amp;quot;userService&amp;quot;)
public class UserService implements IUserService {
    @Resource
    private UserMapper userDao;
    public User getUserById(int userId) {
        return this.userDao.selectByPrimaryKey(userId);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;到了这一步恭喜你&lt;code&gt;spring + mybatis&lt;/code&gt;已经做好了，可以开始测试了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(SpringJUnit4ClassRunner.class) // 表示继承了SpringJUnit4ClassRunner类
@ContextConfiguration(locations = { &amp;quot;classpath:spring-mybatis.xml&amp;quot; })

public class TestMyBatis {
    private static Logger logger = Logger.getLogger(TestMyBatis.class);
    // private ApplicationContext ac = null;
    @Resource
    private IUserService userService = null;

    // @Before
    // public void before() {
    // ac = new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);
    // userService = (IUserService) ac.getBean(&amp;quot;userService&amp;quot;);
    // }

    @Test
    public void test() {
        User user = userService.getUserById(1);
        // System.out.println(user.getUserName());
        // logger.info(&amp;quot;值：&amp;quot;+user.getUserName());
        logger.info(JSON.toJSONString(user));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面右键&lt;code&gt;debug as junit&lt;/code&gt;，如果看到你的数据库的用户信息打印出来了，恭喜你。初步整合成功，如果报错好好看看步骤，然后认真跟着错误修改一下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ssm整合&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;经过上面的战斗，你已经完成&lt;code&gt;spring + mybatis&lt;/code&gt;的整合，下面就会变得很简单。 配置&lt;code&gt;spring.xml&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
    xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
    xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans  
                            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                            http://www.springframework.org/schema/context  
                            http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                            http://www.springframework.org/schema/mvc  
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&amp;quot;&amp;gt;

    &amp;lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&amp;gt;
    &amp;lt;bean id=&amp;quot;mappingJacksonHttpMessageConverter&amp;quot;
        class=&amp;quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;supportedMediaTypes&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&amp;gt;
    &amp;lt;bean
        class=&amp;quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;messageConverters&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;ref bean=&amp;quot;mappingJacksonHttpMessageConverter&amp;quot; /&amp;gt;    &amp;lt;!-- JSON转换器 --&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 对静态资源的访问 --&amp;gt;
    &amp;lt;!-- &amp;lt;mvc:resources mapping=&amp;quot;/js/**&amp;quot; location=&amp;quot;/js/&amp;quot; /&amp;gt; &amp;lt;mvc:resources mapping=&amp;quot;/css/**&amp;quot; 
        location=&amp;quot;/css/&amp;quot; /&amp;gt; --&amp;gt;

    &amp;lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&amp;gt;
    &amp;lt;context:component-scan base-package=&amp;quot;com.mxcms.controller&amp;quot; /&amp;gt;
    &amp;lt;!-- 添加注解驱动 --&amp;gt;
    &amp;lt;mvc:annotation-driven enable-matrix-variables=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;!-- 允许对静态资源文件的访问 --&amp;gt;
    &amp;lt;mvc:default-servlet-handler /&amp;gt;
    &amp;lt;!-- 定义跳转的文件的前后缀 ，视图模式配置 --&amp;gt;
    &amp;lt;bean
        class=&amp;quot;org.springframework.web.servlet.view.InternalResourceViewResolver&amp;quot;&amp;gt;
        &amp;lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&amp;gt;
        &amp;lt;property name=&amp;quot;prefix&amp;quot; value=&amp;quot;/WEB-INF/views/&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;suffix&amp;quot; value=&amp;quot;.jsp&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&amp;gt;
    &amp;lt;bean id=&amp;quot;multipartResolver&amp;quot;
        class=&amp;quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&amp;quot;&amp;gt;
        &amp;lt;!-- 默认编码 --&amp;gt;
        &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot; /&amp;gt;
        &amp;lt;!-- 文件大小最大值 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxUploadSize&amp;quot; value=&amp;quot;10485760000&amp;quot; /&amp;gt;
        &amp;lt;!-- 内存中的最大值 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxInMemorySize&amp;quot; value=&amp;quot;40960&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;web.xml整合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
version=&amp;quot;3.0&amp;quot;&amp;gt;
&amp;lt;display-name&amp;gt;Archetype Created Web Application&amp;lt;/display-name&amp;gt;
    
&amp;lt;!-- Spring和mybatis的配置文件 --&amp;gt;
&amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;classpath:spring-mybatis.xml&amp;lt;/param-value&amp;gt;
&amp;lt;/context-param&amp;gt;
    
&amp;lt;!-- 编码过滤器 --&amp;gt;
&amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt;
    &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;UTF-8&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
    
&amp;lt;!-- Spring监听器 --&amp;gt;
&amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
    
&amp;lt;!-- 防止Spring内存溢出监听器 --&amp;gt;
&amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;org.springframework.web.util.IntrospectorCleanupListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
    
&amp;lt;!-- Spring MVC servlet --&amp;gt;
&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;SpringMVC&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;classpath:spring-mvc.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
    &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;SpringMVC&amp;lt;/servlet-name&amp;gt;
    &amp;lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&amp;gt;
    &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
    
&amp;lt;welcome-file-list&amp;gt;
    &amp;lt;welcome-file&amp;gt;/index.html&amp;lt;/welcome-file&amp;gt;
    &amp;lt;welcome-file&amp;gt;/index.jsp&amp;lt;/welcome-file&amp;gt;
&amp;lt;/welcome-file-list&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;controllers编写配置&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编写controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Controller
@RequestMapping(&amp;quot;/user&amp;quot;)
public class UserController {
    @Resource
    private IUserService userService;
    @RequestMapping(&amp;quot;/showUser&amp;quot;)
    public String toIndex(HttpServletRequest request, Model model) {
        int userId = Integer.parseInt(request.getParameter(&amp;quot;id&amp;quot;));
        User user = this.userService.getUserById(userId);
        model.addAttribute(&amp;quot;user&amp;quot;, user);
        return &amp;quot;User&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>ionic3 构建中遇到找不到AndroidManifest.xml</title>
      <link>https://muxuanuser.github.io/post/201802/ionic3%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E6%89%BE%E4%B8%8D%E5%88%B0androidmanifest.xml%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 11 Feb 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201802/ionic3%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E6%89%BE%E4%B8%8D%E5%88%B0androidmanifest.xml%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;构建Ionic时候有时候会遇到下面问题：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-error&#34;&gt;Failed to install &#39;ionic-plugin-keyboard&#39;: Error: ENOENT: no such file or directory, open &#39;/Users/theo/Projects/mobile/platforms/android/AndroidManifest.xml&#39;
    at Object.fs.openSync (fs.js:651:18)
    at Object.fs.readFileSync (fs.js:553:33)
    at Object.parseElementtreeSync (/Users/theo/Projects/mobile/platforms/android/cordova/node_modules/cordova-common/src/util/xml-helpers.js:180:27)
    at new AndroidManifest (/Users/theo/Projects/mobile/platforms/android/cordova/lib/AndroidManifest.js:29:20)
    at AndroidProject.getPackageName (/Users/theo/Projects/mobile/platforms/android/cordova/lib/AndroidProject.js:99:12)
    at Api.addPlugin (/Users/theo/Projects/mobile/platforms/android/cordova/Api.js:223:57)
    at handleInstall (/Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/cordova-lib/src/plugman/install.js:594:10)
    at /Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/cordova-lib/src/plugman/install.js:357:28
    at _fulfilled (/Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/q/q.js:787:54)
    at self.promiseDispatch.done (/Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/q/q.js:816:30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个问题的原因就是新版本的cordova 7.0.0及以上版本对于新的AndroidManifest.xml路径还没有更新，导致找不到AndroidManifest.xml，下面给出两个解决办法：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;使用原先的cordova
&lt;code&gt;shell
npm uninstall -g cordova
npm install -g cordova@6.5.0
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新布置安卓项目
&lt;code&gt;shell
cordova platform rm android
cordova platform add android
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cordova官方给出的解决办法
修改&lt;code&gt;config.xml&lt;/code&gt;文件，具体可以查看网址&lt;a href=&#39;https://cordova.apache.org/announcements/2017/12/04/cordova-android-7.0.0.html&#39; target=&#39;_blank&#39;&gt;&lt;a href=&#34;https://cordova.apache.org/announcements/2017/12/04/cordova-android-7.0.0.html&#34;&gt;https://cordova.apache.org/announcements/2017/12/04/cordova-android-7.0.0.html&lt;/a&gt;&lt;/a&gt;
```shell
&lt;!-- An existing config.xml --&gt;
&lt;edit-config file=&#34;AndroidManifest.xml&#34; target=&#34;/manifest/application&#34; mode=&#34;merge&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- needs to change to --&gt;

&lt;p&gt;&lt;edit-config file=&#34;app/src/main/AndroidManifest.xml&#34; target=&#34;/manifest/application&#34; mode=&#34;merge&#34;&gt;
```&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>使用JAXB处理XML文件</title>
      <link>https://muxuanuser.github.io/post/201801/%E4%BD%BF%E7%94%A8jaxb%E5%A4%84%E7%90%86xml%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 31 Jan 2018 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201801/%E4%BD%BF%E7%94%A8jaxb%E5%A4%84%E7%90%86xml%E6%96%87%E4%BB%B6/</guid>
      
        <description>

&lt;h2 id=&#34;使用jaxb处理xml文件&#34;&gt;使用JAXB处理XML文件&lt;/h2&gt;

&lt;p&gt;JAXB（Java Architecture for XML Binding) 是一个业界的标准，是一项可以根据XML Schema产生Java类的技术。该过程中，JAXB也提供了将XML实例文档反向生成Java对象树的方法，并能将Java对象树的内容重新写到XML实例文档。从另一方面来讲，JAXB提供了快速而简便的方法将XML模式绑定到Java表示，从而使得Java开发者在Java应用程序中能方便地结合XML数据和处理函数。
&amp;gt; 关键字：&lt;code&gt;JAXB&lt;/code&gt; , &lt;code&gt;Java&lt;/code&gt; , &lt;code&gt;Serialize&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;一个案例&#34;&gt;一个案例&lt;/h2&gt;

&lt;h4 id=&#34;model&#34;&gt;model&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//AllProductLevels 模型
package com.serializations.model;

import java.util.ArrayList;
import java.util.Iterator;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name=&amp;quot;AllProductLevels&amp;quot;)
public class AllProductLevels {
    @Override
    public String toString() {
        String result = &amp;quot;&amp;quot;;
        
        for (Level level : children) {
            result += level.toString() + &amp;quot;    &amp;quot;;
        }
        
        return result;
    }

    @XmlElement(name = &amp;quot;level&amp;quot;, required = true)
    private ArrayList&amp;lt;Level&amp;gt; children;

    public ArrayList&amp;lt;Level&amp;gt; getChildren() {
        return children;
    }

    public void setChildren(ArrayList&amp;lt;Level&amp;gt; childs) {
        children = childs;
    }
}

//Level 模型
package com.serializations.model;

import java.util.ArrayList;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name=&amp;quot;level&amp;quot;)
public class Level {
    @XmlAttribute(name = &amp;quot;id&amp;quot;, required = true)
    private String id;

    @Override
    public String toString() {
        return &amp;quot;Level [id=&amp;quot; + id + &amp;quot;, name=&amp;quot; + name + &amp;quot;, lev=&amp;quot; + lev + &amp;quot;, children=&amp;quot; + children + &amp;quot;]&amp;quot;;
    }

    @XmlAttribute(name = &amp;quot;name&amp;quot;, required = true)
    private String name;
    
    @XmlAttribute(name = &amp;quot;lev&amp;quot;, required = true)
    private String lev;
    @XmlElement(name = &amp;quot;level&amp;quot;, required = true)
    private ArrayList&amp;lt;Level&amp;gt; children;

    public String getLev() {
        return lev;
    }

    public void setLev(String lev) {
        this.lev = lev;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ArrayList&amp;lt;Level&amp;gt; getChildren() {
        return children;
    }

    public void setChildren(ArrayList&amp;lt;Level&amp;gt; child) {
        this.children = child;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建好模型之后开始使用帮助工具，该工具可以方便Java对象和XML字符串之间相互转换，具体细节如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.serializations.util;

import java.io.StringReader;  
import java.io.StringWriter;  
  
import javax.xml.bind.JAXBContext;  
import javax.xml.bind.Marshaller;  
import javax.xml.bind.Unmarshaller; 

public class JAXBUtil {
     /** 
     * JavaBean转换成xml 
     * 默认编码UTF-8 
     * @param obj 
     * @param writer 
     * @return  
     */  
    public static String convertToXml(Object obj) {  
        return convertToXml(obj, &amp;quot;UTF-8&amp;quot;);  
    }  
  
    /** 
     * JavaBean转换成xml 
     * @param obj 
     * @param encoding  
     * @return  
     */  
    public static String convertToXml(Object obj, String encoding) {  
        String result = null;  
        try {  
            JAXBContext context = JAXBContext.newInstance(obj.getClass());  
            Marshaller marshaller = context.createMarshaller();  
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);  
            marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);  
  
            StringWriter writer = new StringWriter();  
            marshaller.marshal(obj, writer);  
            result = writer.toString();  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
  
        return result;  
    }  
  
    /** 
     * xml转换成JavaBean 
     * @param xml 
     * @param c 
     * @return 
     */  
    @SuppressWarnings(&amp;quot;unchecked&amp;quot;)  
    public static &amp;lt;T&amp;gt; T converyToJavaBean(String xml, Class&amp;lt;T&amp;gt; c) {  
        T t = null;  
        try {  
            JAXBContext context = JAXBContext.newInstance(c);  
            Unmarshaller unmarshaller = context.createUnmarshaller();  
            t = (T) unmarshaller.unmarshal(new StringReader(xml));  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
  
        return t;  
    }  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转换案例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.serializations.controller;

import java.awt.List;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import com.serializations.model.AllProductLevels;
import com.serializations.model.Level;
import com.serializations.util.JAXBUtil;

public class JAXBController {
    public void serialize() {
        ArrayList&amp;lt;Level&amp;gt; children = new ArrayList&amp;lt;Level&amp;gt;();

        Level level = new Level();
        level.setId(&amp;quot;1&amp;quot;);
        level.setName(&amp;quot;张三&amp;quot;);
        level.setLev(&amp;quot;1&amp;quot;);

        Level level2 = new Level();
        level2.setId(&amp;quot;1&amp;quot;);
        level2.setName(&amp;quot;李四&amp;quot;);
        level2.setLev(&amp;quot;2&amp;quot;);
        level2.setChildren(null);

        Level level3 = new Level();
        level3.setId(&amp;quot;2&amp;quot;);
        level3.setName(&amp;quot;李四22&amp;quot;);
        level3.setLev(&amp;quot;2&amp;quot;);
        level3.setChildren(null);

        Level level4 = new Level();
        level4.setId(&amp;quot;3&amp;quot;);
        level4.setName(&amp;quot;李四23&amp;quot;);
        level4.setLev(&amp;quot;2&amp;quot;);
        level4.setChildren(null);

        ArrayList&amp;lt;Level&amp;gt; list = new ArrayList&amp;lt;Level&amp;gt;();
        list.add(level2);
        list.add(level3);
        list.add(level4);
        level.setChildren(list);

        Level level5 = new Level();
        level5.setId(&amp;quot;2&amp;quot;);
        level5.setName(&amp;quot;李四&amp;quot;);
        level5.setLev(&amp;quot;1&amp;quot;);
        level5.setChildren(null);

        children.add(level);
        children.add(level5);

        AllProductLevels levels = new AllProductLevels();
        levels.setChildren(children);

        String str = JAXBUtil.convertToXml(levels);
        System.out.println(str);
    }

    public void deSerialize() {
        String xml = &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot; standalone=\&amp;quot;yes\&amp;quot;?&amp;gt;&amp;quot; + &amp;quot;&amp;lt;AllProductLevels&amp;gt;&amp;quot;
                + &amp;quot;&amp;lt;level id=\&amp;quot;1\&amp;quot; name=\&amp;quot;张三\&amp;quot; lev=\&amp;quot;1\&amp;quot;&amp;gt;&amp;quot; + &amp;quot;&amp;lt;level id=\&amp;quot;1\&amp;quot; name=\&amp;quot;李四\&amp;quot; lev=\&amp;quot;2\&amp;quot;/&amp;gt;&amp;quot;
                + &amp;quot;&amp;lt;level id=\&amp;quot;2\&amp;quot; name=\&amp;quot;李四22\&amp;quot; lev=\&amp;quot;2\&amp;quot;/&amp;gt;&amp;quot; + &amp;quot;&amp;lt;level id=\&amp;quot;3\&amp;quot; name=\&amp;quot;李四23\&amp;quot; lev=\&amp;quot;2\&amp;quot;/&amp;gt;&amp;quot; + &amp;quot;&amp;lt;/level&amp;gt;&amp;quot;
                + &amp;quot;&amp;lt;level id=\&amp;quot;2\&amp;quot; name=\&amp;quot;李四\&amp;quot; lev=\&amp;quot;1\&amp;quot;/&amp;gt;&amp;quot; + &amp;quot;&amp;lt;/AllProductLevels&amp;gt;&amp;quot;;
        
        AllProductLevels levels = (AllProductLevels)JAXBUtil.converyToJavaBean(xml, AllProductLevels.class);
        System.out.println(levels);
    }

    public void deSerializeFromFile() throws Exception{
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(&amp;quot;AllProduct.xml&amp;quot;),&amp;quot;UTF-8&amp;quot;));
        String data = null;
        String result = &amp;quot;&amp;quot;;
        while((data = reader.readLine()) != null) result += data;
        
        System.out.println(result);
        
        AllProductLevels levels = (AllProductLevels)JAXBUtil.converyToJavaBean(result, AllProductLevels.class);
        
        System.out.println(levels.getChildren().get(0).getName());
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;AllProductLevels&amp;gt;
    &amp;lt;level id=&amp;quot;1&amp;quot; name=&amp;quot;张三&amp;quot; lev=&amp;quot;1&amp;quot;&amp;gt;
        &amp;lt;level id=&amp;quot;1&amp;quot; name=&amp;quot;李四&amp;quot; lev=&amp;quot;2&amp;quot;/&amp;gt;
        &amp;lt;level id=&amp;quot;2&amp;quot; name=&amp;quot;李四22&amp;quot; lev=&amp;quot;2&amp;quot;/&amp;gt;
        &amp;lt;level id=&amp;quot;3&amp;quot; name=&amp;quot;李四23&amp;quot; lev=&amp;quot;2&amp;quot;/&amp;gt;
    &amp;lt;/level&amp;gt;
    &amp;lt;level id=&amp;quot;2&amp;quot; name=&amp;quot;李四&amp;quot; lev=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;/AllProductLevels&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Level [id=1, name=张三, lev=1, children=[Level [id=1, name=李四, lev=2, children=null], Level [id=2, name=李四22, lev=2, children=null], Level [id=3, name=李四23, lev=2, children=null]]]    Level [id=2, name=李四, lev=1, children=null]    
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>IONIC集成极光推送</title>
      <link>https://muxuanuser.github.io/post/201712/ionic_jpush/</link>
      <pubDate>Sun, 03 Dec 2017 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201712/ionic_jpush/</guid>
      
        <description>

&lt;h2 id=&#34;ionic-集成极光推送插件&#34;&gt;ionic 集成极光推送插件&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;本文档主要介绍极光推送插件的安装使用，ionic环境搭建和ionic的项目创建不在本文范畴。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-注册和使用&#34;&gt;1. 注册和使用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;打开[&amp;lsquo;极光推送官网&amp;rsquo;](&amp;lsquo;&lt;a href=&#34;https://www.jiguang.cn/&#39;)，注册并登陆，创建一个app。&#34;&gt;https://www.jiguang.cn/&#39;)，注册并登陆，创建一个app。&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_2.png&#34; alt=&#34;&#39;创建一个APP&#39;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;读取重要信息，包括appkey和你的应用包名，这两个缺一不可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_2.png&#34; alt=&#34;&#39;读取重要信息&#39;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-创建一个ionic项目&#34;&gt;2. 创建一个ionic项目&lt;/h2&gt;

&lt;p&gt;创建一个ionic项目&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ionic start jgPush
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-修改项目&#34;&gt;3. 修改项目&lt;/h2&gt;

&lt;p&gt;修改config.xml文件，修改widget节点下面的id属性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_4.png&#34; alt=&#34;&#39;修改属性&#39;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-安装插件&#34;&gt;4. 安装插件&lt;/h2&gt;

&lt;p&gt;安装极光推送插件(请使用管理员身份)。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ionic cordova plugin add jpush-phonegap-plugin --variable APP_KEY=your_jpush_appkey

npm install --save @jiguang-ionic/jpush
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_5.png&#34; alt=&#34;&#39;安装插件&#39;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;插件安装完毕就可以编写代码了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_8.png&#34; alt=&#34;&#39;编写代码&#39;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-编译项目&#34;&gt;5. 编译项目&lt;/h2&gt;

&lt;p&gt;编译调试项目。（安卓为例）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ionic cordova build android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_6.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_7.png&#34; alt=&#34;&#39;编译项目&#39;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-测试&#34;&gt;6. 测试&lt;/h2&gt;

&lt;p&gt;在此使用的是在线调试，当然可以使用本团队的api项目调试，[api.lucoder.com/doc/jpush](&amp;lsquo;api.lucoder.com/doc/jpush&amp;rsquo;)调试，具体规则打开网站查看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_9.png&#34; alt=&#34;&#39;调试&#39;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ycdn.lucoder.com/usr/my_lucoder_com/log/20171216/1_10.jpg&#34; alt=&#34;&#39;结果&#39;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>VSCode使用</title>
      <link>https://muxuanuser.github.io/post/201711/vscode/</link>
      <pubDate>Sat, 18 Nov 2017 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201711/vscode/</guid>
      
        <description>

&lt;h2 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;VSCode可以认为是一个迷你版的Visual Studio，大概45M左右，拥有海量的插件可以满足PHP、JAVA、C#、JavaScript、Typescript 、Go、C/C++等语言开发和调试，支持智能提示等。&lt;/p&gt;

&lt;h4 id=&#34;软件安装&#34;&gt;软件安装&lt;/h4&gt;

&lt;p&gt;进入&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;官网&lt;/a&gt;下载软件，建议安装完成之时将所有的复选框都选上，方便以后的开发和使用。&lt;/p&gt;

&lt;h4 id=&#34;插件推荐&#34;&gt;插件推荐&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;因为笔者安装VSCode主要是用来开发ionic应用的，所以下面有限推荐ionic开发所用到的实用插件。
&lt;code&gt;mark
Angular 5 Snippets - Typescript,Html,Angular Material
Beautify css/sass/scss/less
Ionic 3 ionView Snippets
Ionic3 snippets
cssrem
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;常用的插件
&lt;code&gt;mark
VScode-icons
Debugger for Java
ILSpy.Net Decomiler
Java Exctension Pack
Java Test Runner
Maven for Java
Markdown  Preview Enhanced
SQL Beautify
Visual Studio Team Services
Go
Python for VSCode
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>IONIC操作HTTP</title>
      <link>https://muxuanuser.github.io/post/201711/ionic%E6%93%8D%E4%BD%9Chttp/</link>
      <pubDate>Thu, 16 Nov 2017 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201711/ionic%E6%93%8D%E4%BD%9Chttp/</guid>
      
        <description>

&lt;h2 id=&#34;http技术&#34;&gt;Http技术：&lt;/h2&gt;

&lt;p&gt;http请求是客户端请求api使用的一项非常重要的技术，主要有下面几种方法。&lt;/p&gt;

&lt;h4 id=&#34;使用native组件&#34;&gt;使用Native组件&lt;/h4&gt;

&lt;p&gt;这种方法是一种和原生交互行最强的一种方法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://ionicframework.com/docs/native/http/&#34;&gt;https://ionicframework.com/docs/native/http/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ionic cordova plugin add cordova-plugin-advanced-http
$ npm install --save @ionic-native/http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { HTTP } from &#39;@ionic-native/http&#39;;

constructor(private http: HTTP) { }

this.http.get(&#39;http://ionic.io&#39;, {}, {})
  .then(data =&amp;gt; {
    console.log(data.status);
    console.log(data.data); // data received by server
    console.log(data.headers);
  })
  .catch(error =&amp;gt; {
    console.log(error.status);
    console.log(error.error); // error message as string
    console.log(error.headers);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;使用angular自带的http组件-推荐&#34;&gt;使用Angular自带的http组件（推荐）&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;从 @angular/http 模块中导入 Http 类&lt;/li&gt;
&lt;li&gt;导入 RxJS 中的 map 操作符&lt;/li&gt;
&lt;li&gt;使用 DI 方式注入 http 服务&lt;/li&gt;
&lt;li&gt;调用 http 服务的 get() 方法，设置请求地址并发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;调用 Response 对象的 json() 方法，把响应体转成 JSON 对象&lt;/li&gt;
&lt;li&gt;把请求的结果，赋值给 members 属性
&lt;code&gt;ts
import { Component, OnInit } from &#39;@angular/core&#39;;
import { Http } from &#39;@angular/http&#39;; // (1)
import &#39;rxjs/add/operator/map&#39;; // (2)
interface Member {
id: string;
login: string;
avatar_url: string;
}
@Component({
selector: &#39;exe-app&#39;,
template: `
&amp;lt;h3&amp;gt;Angular Orgs Members&amp;lt;/h3&amp;gt;
&amp;lt;ul *ngIf=&amp;quot;members&amp;quot;&amp;gt;
  &amp;lt;li *ngFor=&amp;quot;let member of members;&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;img [src]=&amp;quot;member.avatar_url&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot;/&amp;gt;
      ID：&amp;lt;span&amp;gt;{{member.id}}&amp;lt;/span&amp;gt;
      Name: &amp;lt;span&amp;gt;{{member.login}}&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
`
})
export class AppComponent implements OnInit {
members: Member[];
constructor(private http: Http) { } // (3)
ngOnInit() {
this.http.get(`https://api.github.com/orgs/angular/members?page=1&amp;amp;per_page=5`) // (4)
  .map(res =&amp;gt; res.json()) // (5)
  .subscribe(data =&amp;gt; {
    if (data) this.members = data; // (6)
  });
}
}
&lt;/code&gt;
具体内容和步骤请到这里查看：&lt;a href=&#34;https://segmentfault.com/a/1190000009028150?utm_source=tuicool&amp;amp;utm_medium=referral#articleHeader2&#34;&gt;https://segmentfault.com/a/1190000009028150?utm_source=tuicool&amp;amp;utm_medium=referral#articleHeader2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;使用jquery的http组件-不太推荐的方法&#34;&gt;使用JQuery的http组件（不太推荐的方法）&lt;/h4&gt;

&lt;p&gt;如果你不熟悉上述的方法，也可以使用JQuery，&lt;code&gt;但是我们并不推荐使用这种方法&lt;/code&gt;，ionic是混合开发的框架，当然兼容JQuery。
1. 引入JQuery脚本
2. 使用JQuery 的Ajax&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>IONIC开发环境搭建</title>
      <link>https://muxuanuser.github.io/post/201711/ionic%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 15 Nov 2017 15:43:48 +0800</pubDate>
      
      <guid>https://muxuanuser.github.io/post/201711/ionic%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      
        <description>

&lt;h2 id=&#34;ioni开发环境搭建&#34;&gt;IONI开发环境搭建&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://ionicframework.com/docs/&#34;&gt;https://ionicframework.com/docs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ionic是一个用来开发混合手机应用的，开源的，免费的代码库。可以优化html、css和js的性能，构建高效的应用程序，而且还可以用于构建Sass和AngularJS的优化。ionic会是一个可以信赖的框架。&lt;/p&gt;

&lt;h4 id=&#34;预备环境&#34;&gt;预备环境&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;node环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在nodejs官网&lt;a href=&#34;http://nodejs.cn/&#34;&gt;http://nodejs.cn/&lt;/a&gt;下载最新的适合电脑系统要求的nodejs安装包，解压文件配置环境变量，如：&lt;code&gt;NODE_HOME&lt;/code&gt;：&lt;code&gt;D:\DevT\node-v8.9.3-win-x64&lt;/code&gt;，配置完毕之后可以使用命令查看是否安装完成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; node -v
v8.9.3
&amp;gt; npm -v
5.5.1
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;ionic环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完成上述步骤之后，你可以安装ionic了，使用npm安装ionic。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; npm install -g ionic
&amp;gt; ionic -v
3.20.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;cordova 环境&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; npm install cordova -g cordova
&amp;gt; cordova -v
6.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时ionic开发环境已经完全安装完毕，&lt;code&gt;ionic start [AppName]&lt;/code&gt; 开始创建ionic项目&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>