<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>牧轩居士</title>
    <link>https://www.gecore.win/</link>
    <description>Recent content on 牧轩居士</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 May 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.gecore.win/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASP.NET Core 使用Entity Framework &#43; SQLite3</title>
      <link>https://www.gecore.win/post/201805/netcore_ef_sqlite/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201805/netcore_ef_sqlite/</guid>
      
        <description>

&lt;h2 id=&#34;说明名&#34;&gt;说明名&lt;/h2&gt;

&lt;p&gt;目前java10已经发布，现在可以到
 &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html&#34;&gt;Java10&lt;/a&gt; 下载java10，如果你是用记事本编写代码可以直接测试，如果使用Eclipse需要使用
 &lt;a href=&#34;http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops4/M-4.7.3aRC1-201803231030/eclipse-SDK-4.7.3aRC1-win32-x86_64.zip&#34;&gt;Eclipse 4.7.3a Release Candidate Build: 4.7.3aRC1&lt;/a&gt; 才支持Java10。&lt;/p&gt;

&lt;h2 id=&#34;创建一个netcore项目&#34;&gt;创建一个netcore项目&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011750.png&#34; alt=&#34;创建项目&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;创建一个blog模型&#34;&gt;创建一个Blog模型&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;[Table(name: &amp;quot;T_Blog&amp;quot;)]
public class Blogs
{
    public int Id { get; set; }
    public String Title { get; set; }
    public String Posttime { get; set; }
    public String Detial { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;创建一个数据上下文&#34;&gt;创建一个数据上下文&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class DB : DbContext
{
    public DbSet&amp;lt;Blogs&amp;gt; Blogs { get; set; }
    public DB(DbContextOptions&amp;lt;DB&amp;gt; options) : base(options) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;添加数据项下文注入&#34;&gt;添加数据项下文注入&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt; public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext&amp;lt;DB&amp;gt;(options =&amp;gt;
        {
            options.UseSqlite(&amp;quot;Data Source=sqlite.db&amp;quot;);
        });
        services.AddMvc();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;装插件&#34;&gt;装插件&lt;/h4&gt;

&lt;p&gt;下面开始安装一系列的插件，由于官网的教程是直接使用命令行安装的包，命令行比较长，我们才用&lt;code&gt;Nuget&lt;/code&gt;下载。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/20180501175501.png&#34; alt=&#34;Nuget下载&#34; /&gt;&lt;/p&gt;

&lt;p&gt;找到&lt;code&gt;Microsoft EntityFrameCore.Sqlite&lt;/code&gt;，然后复制这个名字到搜索框里面，下面选取这两个安装插件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011756.png&#34; alt=&#34;安装这两个&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后，我们把最后的&lt;code&gt;sqlite&lt;/code&gt;修改为&lt;code&gt;Tool&lt;/code&gt;搜索出来下面的图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011757.png&#34; alt=&#34;找出来tool&#34; /&gt;&lt;/p&gt;

&lt;p&gt;复制名称&lt;code&gt;Microsoft.EntityFrameworkCore.Tools.DotNet&lt;/code&gt;，关闭VS，然后用记事本或者notepad等工具打开项目文件&lt;code&gt;002_EFSQLite.csproj&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;添加一条数据：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;DotNetCliToolReference Include=&amp;quot;Microsoft.EntityFrameworkCore.Tools.DotNet&amp;quot; Version=&amp;quot;2.0.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;开始反向工程&#34;&gt;开始反向工程&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet ef migrations add InitialCreate
dotnet ef database update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时你看到产生了一个db数据库文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011805.png&#34; alt=&#34;自动生成一个db文件&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;创建controller控制器&#34;&gt;创建Controller控制器&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011759.png&#34; alt=&#34;找出来tool&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011802.png&#34; alt=&#34;找出来tool&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们向db里面添加一些数据，运行查看效果。&lt;/p&gt;

&lt;h3 id=&#34;结果&#34;&gt;结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011810.png&#34; alt=&#34;结果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201805/imgs/201805011811.png&#34; alt=&#34;结果&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ASP.NET CORE EF操作数据库</title>
      <link>https://www.gecore.win/post/201804/asp.net-core-ef%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201804/asp.net-core-ef%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;写在前面：本文主要内容大多参考的MSD官网文档，本节参考网址 &lt;a href=&#34;https://docs.microsoft.com/zh-cn/aspnet/core/data/ef-rp/intro&#34;&gt;https://docs.microsoft.com/zh-cn/aspnet/core/data/ef-rp/intro&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;codefirst&#34;&gt;CodeFirst&lt;/h2&gt;

&lt;h3 id=&#34;0-安装ef框架&#34;&gt;0. 安装EF框架&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-创建model实体&#34;&gt;1. 创建Model实体&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;public class Student
{
    public int ID { get; set; }
    public string LastName { get; set; }
    public string FirstMidName { get; set; }
    public DateTime EnrollmentDate { get; set; }

    public ICollection&amp;lt;Enrollment&amp;gt; Enrollments { get; set; }
}
public class Course
{
    [DatabaseGenerated(DatabaseGeneratedOption.None)]
    public int CourseID { get; set; }
    public string Title { get; set; }
    public int Credits { get; set; }
    public ICollection&amp;lt;Enrollment&amp;gt; Enrollments { get; set; }
}
public enum Grade
{
    A, B, C, D, F
}
public class Enrollment
{
    public int EnrollmentID { get; set; }
    public int CourseID { get; set; }
    public int StudentID { get; set; }
    public Grade? Grade { get; set; }
    public Course Course { get; set; }
    public Student Student { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-创建数据上下文&#34;&gt;2. 创建数据上下文&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;public class SchoolContext : DbContext
    {
        public SchoolContext(DbContextOptions&amp;lt;SchoolContext&amp;gt; options) : base(options)
        {
        }

        public DbSet&amp;lt;Course&amp;gt; Courses { get; set; }
        public DbSet&amp;lt;Enrollment&amp;gt; Enrollments { get; set; }
        public DbSet&amp;lt;Student&amp;gt; Students { get; set; }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity&amp;lt;Course&amp;gt;().ToTable(&amp;quot;Course&amp;quot;);
            modelBuilder.Entity&amp;lt;Enrollment&amp;gt;().ToTable(&amp;quot;Enrollment&amp;quot;);
            modelBuilder.Entity&amp;lt;Student&amp;gt;().ToTable(&amp;quot;Student&amp;quot;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-依赖注入&#34;&gt;3. 依赖注入&lt;/h3&gt;

&lt;p&gt;打开&lt;code&gt;Setup.cs&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.AddDbContext&amp;lt;SchoolContext&amp;gt;(options =&amp;gt;
      options.UseSqlServer(Configuration.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-创建连接字符串&#34;&gt;4. 创建连接字符串&lt;/h3&gt;

&lt;p&gt;打开&lt;code&gt;appsettings.json&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=ContosoUniversity1;ConnectRetryCount=0;Trusted_Connection=True;MultipleActiveResultSets=true&amp;quot;
  },
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;IncludeScopes&amp;quot;: false,
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-创建数据库&#34;&gt;5. 创建数据库&lt;/h3&gt;

&lt;p&gt;打开&lt;code&gt;工具&lt;/code&gt; -&amp;gt; &lt;code&gt;NuGet包管理&lt;/code&gt; -&amp;gt; &lt;code&gt;包管理控制台&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt; Add-Migration InitialCreate
 Update-Database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果过程中出现错误：&lt;code&gt;The term &#39;add-migration&#39; is not recognized as the name of a cmdlet&lt;/code&gt;，重启Visual Studio解决。&lt;/p&gt;

&lt;h3 id=&#34;6-创建控制器&#34;&gt;6. 创建控制器&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;解决方案资源管理器&lt;/code&gt;中，右键单击&lt;code&gt;控制器&lt;/code&gt;文件夹，然后选择&lt;code&gt;添加&lt;/code&gt;&amp;gt;&lt;code&gt;控制器&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;视图使用 Entity Framework 的 MVC 控制器&lt;/code&gt;，然后单击&lt;code&gt;确定&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;模型类&lt;/code&gt;设置为&lt;code&gt;Student&lt;/code&gt;，将&lt;code&gt;数据上下文类&lt;/code&gt;设置为 &lt;code&gt;StudentContext&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;单击 &lt;code&gt;添加&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;选中&lt;code&gt;wwwroot&lt;/code&gt;右键浏览器查看，输入你的控制器和地址即可，或者直接点击运行。&lt;/p&gt;

&lt;h2 id=&#34;dbfirst&#34;&gt;DbFirst&lt;/h2&gt;

&lt;h3 id=&#34;0-安装ef框架-1&#34;&gt;0. 安装EF框架&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-初始化数据库&#34;&gt;1. 初始化数据库&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;CREATE DATABASE [Blogging];
GO

USE [Blogging];
GO

CREATE TABLE [Blog] (
    [BlogId] int NOT NULL IDENTITY,
    [Url] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_Blog] PRIMARY KEY ([BlogId])
);
GO

CREATE TABLE [Post] (
    [PostId] int NOT NULL IDENTITY,
    [BlogId] int NOT NULL,
    [Content] nvarchar(max),
    [Title] nvarchar(max),
    CONSTRAINT [PK_Post] PRIMARY KEY ([PostId]),
    CONSTRAINT [FK_Post_Blog_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [Blog] ([BlogId]) ON DELETE CASCADE
);
GO

INSERT INTO [Blog] (Url) VALUES
(&#39;http://blogs.msdn.com/dotnet&#39;),
(&#39;http://blogs.msdn.com/webdev&#39;),
(&#39;http://blogs.msdn.com/visualstudio&#39;)
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-反向工程生成代码&#34;&gt;2. 反向工程生成代码&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;工具&lt;/code&gt;–&amp;gt;&lt;code&gt;NuGet 包管理器&lt;/code&gt;–&amp;gt;&lt;code&gt;包管理器控制台&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Scaffold-DbContext &amp;quot;Server=(localdb)\mssqllocaldb;Database=Blogging;Trusted_Connection=True;&amp;quot; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果遇到错误&lt;code&gt;The term &#39;Scaffold-DbContext&#39; is not recognized as the name of a cmdlet&lt;/code&gt;，请重启Visual Studio！&lt;/p&gt;

&lt;h3 id=&#34;3-依赖注入-1&#34;&gt;3. 依赖注入&lt;/h3&gt;

&lt;p&gt;打开&lt;code&gt;Setup.cs&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.AddDbContext&amp;lt;SchoolContext&amp;gt;(options =&amp;gt;
      options.UseSqlServer(Configuration.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-创建连接字符串-1&#34;&gt;4. 创建连接字符串&lt;/h3&gt;

&lt;p&gt;打开&lt;code&gt;appsettings.json&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=ContosoUniversity1;ConnectRetryCount=0;Trusted_Connection=True;MultipleActiveResultSets=true&amp;quot;
  },
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;IncludeScopes&amp;quot;: false,
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-创建控制器&#34;&gt;5. 创建控制器&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;解决方案资源管理器&lt;/code&gt;中，右键单击&lt;code&gt;控制器&lt;/code&gt;文件夹，然后选择&lt;code&gt;添加&lt;/code&gt;&amp;gt;&lt;code&gt;控制器&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;视图使用 Entity Framework 的 MVC 控制器&lt;/code&gt;，然后单击&lt;code&gt;确定&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;模型类&lt;/code&gt;设置为&lt;code&gt;Blogs&lt;/code&gt;，将&lt;code&gt;数据上下文类&lt;/code&gt;设置为 &lt;code&gt;BlogsContext&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;单击 &lt;code&gt;添加&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;选中&lt;code&gt;wwwroot&lt;/code&gt;右键浏览器查看，输入你的控制器和地址即可，或者直接点击运行。&lt;/p&gt;

&lt;h2 id=&#34;结果&#34;&gt;结果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.microsoft.com/zh-cn/ef/core/get-started/aspnetcore/_static/create.png&#34; alt=&#34;运行结果1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.microsoft.com/zh-cn/ef/core/get-started/aspnetcore/_static/index-existing-db.png&#34; alt=&#34;运行结果2&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>.NET Core 系列文章</title>
      <link>https://www.gecore.win/post/201804/asp_net_core/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201804/asp_net_core/</guid>
      
        <description>

&lt;h2 id=&#34;提前说明&#34;&gt;提前说明&lt;/h2&gt;

&lt;p&gt;.NET Core 是一个通用开发平台，由 Microsoft 和 GitHub 上的 .NET 社区共同维护。 它是跨平台的，支持 Windows、macOS 和 Linux，并且可用于设备、云和嵌入式/IoT 方案。&lt;/p&gt;

&lt;p&gt;本文主要是用于导航.NET Core专栏内容，文章大部分内容是参考《&lt;a href=&#34;https://docs.microsoft.com/zh-cn/dotnet/core/index&#34;&gt;MSDN&lt;/a&gt;》完成，这是唯一一手官方权威文档。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;入门&#34;&gt;入门&lt;/h2&gt;

&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;

&lt;h2 id=&#34;教程&#34;&gt;教程&lt;/h2&gt;

&lt;h4 id=&#34;数据库&#34;&gt;数据库&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Entity Framework Core
&lt;a href=&#34;https://www.gecore.win/post/201804/asp.net-core-ef%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/&#34;&gt;ASP.NET Core MSSQL&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Entity Framework Core SQLite
&lt;a href=&#34;https://www.gecore.win/post/201805/netcore_ef_sqlite/&#34;&gt;ASP.NET Core SQLite3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cli变更&#34;&gt;CLI变更&lt;/h2&gt;

&lt;h2 id=&#34;迁移&#34;&gt;迁移&lt;/h2&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;h2 id=&#34;单元测试&#34;&gt;单元测试&lt;/h2&gt;

&lt;h2 id=&#34;版本控制&#34;&gt;版本控制&lt;/h2&gt;

&lt;h2 id=&#34;一些工具&#34;&gt;一些工具&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;更新记录&#34;&gt;更新记录&lt;/h2&gt;

&lt;p&gt;2018-04-11 添加ASP.NET Core EF 操作数据库&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java10中的var初探</title>
      <link>https://www.gecore.win/post/201804/java10%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201804/java10%E5%88%9D%E6%8E%A2/</guid>
      
        <description>

&lt;h2 id=&#34;java10中的var初探&#34;&gt;Java10中的var初探&lt;/h2&gt;

&lt;p&gt;目前java10已经发布，现在可以到
 &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html&#34;&gt;Java10&lt;/a&gt; 下载java10，如果你是用记事本编写代码可以直接测试，如果使用Eclipse需要使用
 &lt;a href=&#34;http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops4/M-4.7.3aRC1-201803231030/eclipse-SDK-4.7.3aRC1-win32-x86_64.zip&#34;&gt;Eclipse 4.7.3a Release Candidate Build: 4.7.3aRC1&lt;/a&gt; 才支持Java10。&lt;/p&gt;

&lt;h4 id=&#34;var-关键字&#34;&gt;var 关键字&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.test.main;

import java.util.ArrayList;

public class Program {

    public static void main(String[] args) {
        var list = new ArrayList&amp;lt;Integer&amp;gt;();
        list.add(1);
        list.add(8);
        list.add(6);
        list.add(3);
        list.add(5);
        list.add(0);
        list.add(-1);
        list.add(10);
        list.sort((Integer a, Integer b) -&amp;gt; {return a.compareTo(b);});
        System.out.println(&amp;quot;排序结果：&amp;quot;);
        for (int i = 0; i &amp;lt; list.size(); i++) {
            System.out.print(list.get(i) + &amp;quot;\t&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;结果&#34;&gt;结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201804/imgs/4.png&#34; alt=&#34;结果&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>mpi并行计算环境搭建</title>
      <link>https://www.gecore.win/post/201804/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201804/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/</guid>
      
        <description>

&lt;h2 id=&#34;什么是mpi&#34;&gt;什么是MPI&lt;/h2&gt;

&lt;p&gt;MPI是一个跨语言的通讯协议，用于编写并行计算机。支持点对点和广播。MPI是一个信息传递应用程序接口，包括协议和和语义说明，他们指明其如何在各种实现中发挥其特性。MPI的目标是高性能，大规模性，和可移植性。MPI在今天仍为高性能计算的主要模型。&lt;/p&gt;

&lt;h4 id=&#34;下载安装mpi&#34;&gt;下载安装MPI&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mpich.org/downloads/&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb524831%28v=vs.85%29.aspx&#34;&gt;Windows下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201804/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/1.png&#34; alt=&#34;Windows MPI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;安装之后配置环境变量，然后运行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\Lucifer&amp;gt;mpiexec
Launches an application on multiple hosts.

Usage:

    mpiexec [options] executable [args] [ : [options] exe [args] : ... ]
    mpiexec -configfile &amp;lt;file name&amp;gt;

Common options:

-n     &amp;lt;num_processes&amp;gt;
-env   &amp;lt;env_var_name&amp;gt; &amp;lt;env_var_value&amp;gt;
-wdir  &amp;lt;working_directory&amp;gt;
-hosts n host1 [m1] host2 [m2] ... hostn [mn]
-cores &amp;lt;num_cores_per_host&amp;gt;
-lines
-trace [filter] [Deprecated.  Please control MPI tracing with any Event Tracing
                  for Windows (ETW) tool. E.g. XPERF, LOGMAN]
-tracemax &amp;lt;size_in_mb&amp;gt; [Deprecated.]
-debug [0-3]

Examples:

    mpiexec -n 4 pi.exe
    mpiexec -hosts 1 server1 master : -n 8 worker

For a complete list of options, run mpiexec -help2
For a list of environment variables, run mpiexec -help3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出现上面的结果表示环境配置正确，开始下一步，否则检查自己的配置。&lt;/p&gt;

&lt;h3 id=&#34;mpi-net&#34;&gt;MPI.NET&lt;/h3&gt;

&lt;p&gt;上面简介已经说明，MPI是一个跨语言通讯协议，不局限于某一中开发语言，由于笔者个人原因，选择了C#语言，所以使用MPI.NET。Java开发者可以借助于&lt;a href=&#34;https://blog.csdn.net/kongxx/article/details/52237416&#34;&gt;OpenMPI执行Java MPI作业&lt;/a&gt;这篇文章，有点麻烦，本文不在赘述。&lt;/p&gt;

&lt;h4 id=&#34;创建一个console-项目&#34;&gt;创建一个Console 项目&lt;/h4&gt;

&lt;p&gt;然后使用&lt;code&gt;nuget&lt;/code&gt;下载一个包&lt;code&gt;MPI.NET&lt;/code&gt;，项目地址:&lt;a href=&#34;https://github.com/jmp75/MPI.NET&#34;&gt;https://github.com/jmp75/MPI.NET&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201804/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/2.png&#34; alt=&#34;下载mpi包&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果&lt;code&gt;nuget&lt;/code&gt;下载包出现错误，可以使用这个压缩包文件，注意使用&lt;code&gt;.NET Fframework 4.0&lt;/code&gt;，其他版本或许可用，但是有潜在的报错风险：[]()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;//初始化MPI运行环境  
using (new MPI.Environment(ref args))  
{  
    //获取Communicator  
    var comm = Communicator.world;  
    if (0 == comm.Rank)  
       {  
        //令0进程发送数据然后接收数据  
        comm.Send(&amp;quot;Rosie&amp;quot;, 1, 0);  
        // receive the final message   
        var msg = comm.Receive&amp;lt;string&amp;gt;(Communicator.anySource, 0);  
        //输出收到的信息  
        Console.WriteLine(&amp;quot;Rank &amp;quot; + comm.Rank + &amp;quot; received message \&amp;quot;&amp;quot; + msg + &amp;quot;\&amp;quot;.&amp;quot;);  
        } 
        else 
        { 
            //令n程序接收上一进程发送的数据然后发给下一进程
            var msg = comm.Receive&amp;lt;string&amp;gt;(comm.Rank - 1, 0);
            //输入收到的消息
            Console.WriteLine(&amp;quot;Rank &amp;quot; + comm.Rank + &amp;quot; received message \&amp;quot;&amp;quot; + msg + &amp;quot;\&amp;quot;.&amp;quot;);
            //发送给下一个进程 
            comm.Send(msg + &amp;quot;, &amp;quot; + comm.Rank, (comm.Rank + 1) % comm.Size, 0);
        }
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意最后一行千万不要添加读取一行操作，否则必然报错！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创建一个脚本文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;mpiexec -n 4 MpiSingleTestDemo.exe
pause();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201804/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/3.png&#34; alt=&#34;单机运行结果&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;多机运行&#34;&gt;多机运行&lt;/h3&gt;

&lt;p&gt;MPI是一个跨语言的通讯工具，我们可以用它来进行跨机器并行计算，需要借助的工具是&lt;code&gt;smpd.exe&lt;/code&gt;，该文件在你安装MPI时候已经被自动安装。&lt;/p&gt;

&lt;p&gt;我们仍然使用上述的例子进行下面的简单配置：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;寻找两台同一个网络下的电脑 A：10.12.52.160，电脑 B：10.12.37.191。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;两台电脑同时设置两个完全相同的账户和密码，假如均为 &lt;code&gt;root&lt;/code&gt;和&lt;code&gt;123456&lt;/code&gt;（Linux用户不要这么干）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关闭防火墙，尝试Ping主机，保证两台主机之间可以相互通讯。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分别复制完全相同的软件到两台主机，并且保证位置相同，假如：&lt;code&gt;C:\mpi\&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;双方主机启动smpd软件&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;smpd -d 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似下面的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Lucifer&amp;gt;smpd -d 2
[-1:1260] Launching SMPD service.
[-1:1260] smpd listening on port 8677
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;一方启动并行程序&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;mpiexec -hosts 2 10.12.52.160 3 10.12.37.191 4 MpiSingleTestDemo.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201804/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/4.png&#34; alt=&#34;多机运行结果&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;几点说明&#34;&gt;几点说明&lt;/h3&gt;

&lt;p&gt;MPI单机运行比较简单，但是多机运行时候务必保证下面几点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;双方必须使用的是同一套用户名和密码，即用户名和密码完全相同。&lt;/li&gt;
&lt;li&gt;关闭windows防火墙，保证两台机器之间可以相互通讯。&lt;/li&gt;
&lt;li&gt;必须先启动smpd软件，这是两台计算机之间通讯必不可少的中介。&lt;/li&gt;
&lt;li&gt;并行程序必须每一个节点都有一套，并且程序的位置是相同的。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title> ionic 使用 webrtc</title>
      <link>https://www.gecore.win/post/201803/ionic-webrtc/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201803/ionic-webrtc/</guid>
      
        <description>

&lt;h2 id=&#34;ionic-使用-webrtc&#34;&gt;ionic 使用 webrtc&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;WebRTC实现了基于网页的视频会议，标准是WHATWG 协议，目的是通过浏览器提供简单的javascript就可以达到实时通讯（Real-Time Communications (RTC)）能力。
WebRTC（Web Real-Time Communication）项目的最终目的主要是让Web开发者能够基于浏览器（Chrome\FireFox...）轻易快捷开发出丰富的实时多媒体应用，而无需下载安装任何插件，Web开发者也无需关注多媒体的数字信号处理过程，只需编写简单的Javascript程序即可实现，W3C等组织正在制定Javascript 标准API，目前是WebRTC 1.0版本，Draft状态；另外WebRTC还希望能够建立一个多互联网浏览器间健壮的实时通信的平台，形成开发者与浏览器厂商良好的生态环境。同时，Google也希望和致力于让WebRTC的技术成为HTML5标准之一，可见Google布局之深远。
WebRTC提供了视频会议的核心技术，包括音视频的采集、编解码、网络传输、显示等功能，并且还支持跨平台：windows，linux，mac，android。 &amp;mdash; &lt;a href=&#34;https://baike.baidu.com/item/WebRTC/5522744?fr=aladdin&#34;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官网：&lt;a href=&#34;www.webrtc.ort&#34;&gt;www.webrtc.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;实现qq电话功能&#34;&gt;实现QQ电话功能&lt;/h3&gt;

&lt;p&gt;本节介绍如何使用ionic + webrtc使用rtcmulticonnection组件实现QQ电话功能。&lt;/p&gt;

&lt;p&gt;官网：&lt;a href=&#34;http://www.rtcmulticonnection.org/&#34;&gt;http://www.rtcmulticonnection.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github：&lt;a href=&#34;https://github.com/muaz-khan/RTCMultiConnection&#34;&gt;https://github.com/muaz-khan/RTCMultiConnection&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;引用脚本&#34;&gt;引用脚本&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;!-- WebRTC 引用 --&amp;gt;
  &amp;lt;script src=&amp;quot;https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- &amp;lt;script src=&amp;quot;assets/js/getHtmlMediaElement.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
  &amp;lt;script src=&amp;quot;assets/js/getMediaElement.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;html代码&#34;&gt;html代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;视频聊天界面&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content padding&amp;gt;
  &amp;lt;div id=&amp;quot;videos-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/ion-content&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;typescript代码&#34;&gt;Typescript代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;
declare var RTCMultiConnection;
declare var MediaHelper;

@IonicPage()
@Component({
  selector: &#39;page-video-running&#39;,
  templateUrl: &#39;video-running.html&#39;,
})
export class VideoRunningPage {

  mediaHelper: any;
  connection: any;
  constructor(public navCtrl: NavController, public navParams: NavParams) {
  }

  ionViewDidLoad() {
    this.mediaHelper = new MediaHelper();
    this.connection = new RTCMultiConnection();
    this.doWork();
  }

  doWork(): void {
    //数据配置
    this.connection.socketURL = &#39;https://rtcmulticonnection.herokuapp.com:443/&#39;;
    // comment-out below line if you do not have your own socket.io server
    // connection.socketURL = &#39;https://rtcmulticonnection.herokuapp.com:443/&#39;;
    this.connection.socketMessageEvent = &#39;video-conference-demo&#39;;
    this.connection.session = {
      audio: true,
      video: true
    };
    this.connection.maxParticipantsAllowed = 1;
    this.connection.sdpConstraints.mandatory = {
      OfferToReceiveAudio: true,
      OfferToReceiveVideo: true
    };
    this.connection.videosContainer = document.getElementById(&#39;videos-container&#39;);

    this.connection.onstream = (event) =&amp;gt; {
      if (event.type == &#39;local&#39;) {
        event.stream.muted = true;
      }

      var width = 200;//parseInt(connection.videosContainer.clientWidth / 2) - 20;
      var mediaElement = this.mediaHelper.getMedia(event.mediaElement, {
        title: event.userid,
        buttons: [&#39;full-screen&#39;],
        width: width,
        showOnMouseEnter: false
      });
      this.connection.videosContainer.appendChild(mediaElement);
      setTimeout(() =&amp;gt; {
        mediaElement.media.play();
      }, 5000);
      mediaElement.id = event.streamid;
    };

    this.connection.onstreamended = (event) =&amp;gt; {
      var mediaElement = document.getElementById(event.streamid);
      if (mediaElement) {
        mediaElement.parentNode.removeChild(mediaElement);
      }
    };
    this.connection.openOrJoin(&amp;quot;15700000000&amp;quot;, (isRoomExists, roomid) =&amp;gt; {
      if (!isRoomExists) {
        console.log(roomid);
      }
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;效果&#34;&gt;效果&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201803/imgs/效果.png&#34; alt=&#34;效果&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ionic 定位技术</title>
      <link>https://www.gecore.win/post/201803/ionic%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201803/ionic%E5%AE%9A%E4%BD%8D/</guid>
      
        <description>

&lt;h2 id=&#34;ionic-定位技术&#34;&gt;ionic 定位技术&lt;/h2&gt;

&lt;p&gt;ionic开发的混合app应用，所以离不开手机定位。&lt;/p&gt;

&lt;h4 id=&#34;使用ionic-native&#34;&gt;使用ionic native&lt;/h4&gt;

&lt;p&gt;使用ionic native可以参考这个网址：&lt;a href=&#34;https://ionicframework.com/docs/native/geolocation/&#34;&gt;https://ionicframework.com/docs/native/geolocation/&lt;/a&gt;，按照这里面的步骤一步一步实现即可完成。&lt;/p&gt;

&lt;h4 id=&#34;使用html5-定位&#34;&gt;使用HTML5 定位&lt;/h4&gt;

&lt;p&gt;可以使用html5来实现定位&lt;a href=&#34;http://www.w3school.com.cn/html5/html_5_geolocation.asp&#34;&gt;http://www.w3school.com.cn/html5/html_5_geolocation.asp&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;使用三方组建&#34;&gt;使用三方组建&lt;/h4&gt;

&lt;p&gt;可以使用百度地图、高德地图等三方地图组件实现定位功能。&lt;/p&gt;

&lt;p&gt;百度定位：&lt;a href=&#34;http://lbsyun.baidu.com/jsdemo.htm#i8_1&#34;&gt;http://lbsyun.baidu.com/jsdemo.htm#i8_1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;高德地图：&lt;a href=&#34;http://lbs.amap.com/api/javascript-api/example/location/browser-location&#34;&gt;http://lbs.amap.com/api/javascript-api/example/location/browser-location&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ionic 融入百度地图</title>
      <link>https://www.gecore.win/post/201803/ionic%E8%9E%8D%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201803/ionic%E8%9E%8D%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</guid>
      
        <description>

&lt;h2 id=&#34;ionic-融入百度地图&#34;&gt;ionic 融入百度地图&lt;/h2&gt;

&lt;p&gt;百度地图是一个非常成熟的一个地图组件，在很多项目中都会用到百度地图组件，本节就介绍如何在ionic项目中使用百度地图。&lt;/p&gt;

&lt;h4 id=&#34;在index-html中添加引用&#34;&gt;在index.html中添加引用&lt;/h4&gt;

&lt;p&gt;在ionic的&lt;code&gt;index.html&lt;/code&gt;文件中添加script引用脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://api.map.baidu.com/api?v=2.0&amp;amp;ak=da1K4Mxg4LItgEhMy5h8k3ZbXzLzFb2I&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;引入百度地图&#34;&gt;引入百度地图&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import {Platform, IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;

//百度地图API需要先这样声明一下，声明以后就可以使用了
declare var BMap: any;

@IonicPage()
@Component({
  selector: &#39;page-map-demos&#39;,
  templateUrl: &#39;map-demos.html&#39;,
})
export class MapDemosPage {
  constructor(public navCtrl: NavController,public navParams: NavParams) {
  }

  ionViewDidLoad() {
    // 创建百度地图API的Map实例
    let map = new BMap.Map(&#39;map&#39;);
    // 初始化地图,设置中心点坐标（河大计算机学院门前路上）和地图级别（11）
    map.centerAndZoom(new BMap.Point(114.315745, 34.824635), 11);
    //添加地图类型控件
    map.addControl(new BMap.MapTypeControl());
    // 设置地图显示的城市 此项是必须设置的
    map.setCurrentCity(&amp;quot;开封&amp;quot;);
    //开启鼠标滚轮缩放，默认false
    map.enableScrollWheelZoom(true);
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;figure class=&#34;half&#34;&gt;
    &lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201803/imgs/效果1.png&#34; style=&#34;float:left;width:45%&#34;&gt;
    &lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201803/imgs/效果2.png&#34; style=&#34;float:left;width:45%;padding:1rem&#34;&gt;
&lt;/figure&gt;
</description>
      
    </item>
    
    <item>
      <title>基于LocalSortage实现的web临时数据库</title>
      <link>https://www.gecore.win/post/201803/%E5%9F%BA%E4%BA%8Elocalsortage%E5%AE%9E%E7%8E%B0%E7%9A%84web%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201803/%E5%9F%BA%E4%BA%8Elocalsortage%E5%AE%9E%E7%8E%B0%E7%9A%84web%E6%95%B0%E6%8D%AE/</guid>
      
        <description>

&lt;h2 id=&#34;基于localsortage实现的web临时数据库&#34;&gt;基于LocalSortage实现的web临时数据库&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;该数据库基于localStorage的一个封装，实现键值对的存入和键值的取出，支持跨页面数据保存。该封装是团队内部使用的封装，不保证通用性以及bug的出现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;用途&#34;&gt;用途&lt;/h3&gt;

&lt;p&gt;可以用于临时保存登陆用户的数据，不必重复回发请求服务器。&lt;/p&gt;

&lt;h3 id=&#34;javscript代码&#34;&gt;Javscript代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//本地数据库
var LocalDb = function () {
    var db = [];
    this.print = function () {
        console.log(db);
    }
    this.add = function (key, value) {
        if (this.exist(key)) {
            console.log(&amp;quot;键入重复数据！&amp;quot;);
            return;
        }
        var json = { &amp;quot;key&amp;quot;: key, &amp;quot;value&amp;quot;: value }
        db.push(json);
    }
    this.remove = function (key) {
        var index = -1;
        for (var i = 0; i &amp;lt; db.length; i++) {
            if (db[i].key == key) {
                index = i;
            }
        }

        if (index == -1) return;
        else db[index] = null;
    }
    this.get = function (key) {
        for (var i = 0; i &amp;lt; db.length; i++) {
            if (db[i].key == key) return db[i].value;
        }
    }
    this.index = function (index) {
        return db[index];
    }
    this.exist = function (key) {
        for (var i = 0; i &amp;lt; db.length; i++) {
            if (db[i].key == key) return true;
        }
    }
    this.load = function (name) {
        if (window.localStorage) {//判断浏览器是否支持 localStorage
            var ls = window.localStorage;
            db = JSON.parse(ls.getItem(&amp;quot;mx_web_db_sortager&amp;quot;));//设置值
        } else {
            console.log(&#39;浏览器不支持 localStorage&#39;);
        }
    }
    this.write = function (name, expiredays) {
        if (window.localStorage) {//判断浏览器是否支持 localStorage
            var ls = window.localStorage;
            ls.setItem(&amp;quot;mx_web_db_sortager&amp;quot;, JSON.stringify(db));//设置值
        } else {
            console.log(&#39;浏览器不支持 localStorage&#39;);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;未来扩展&#34;&gt;未来扩展&lt;/h3&gt;

&lt;p&gt;使用dom的cookie保存数据，可以保证较长时间的存储。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>设置Maven镜像加快文件下载</title>
      <link>https://www.gecore.win/post/201803/maven%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201803/maven%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F/</guid>
      
        <description>

&lt;h2 id=&#34;设置maven镜像加快文件下载&#34;&gt;设置Maven镜像加快文件下载&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在日常生活中，我们使用maven下载需要的jar包，但是很多的时候由于中央仓库没有，所以我们没有办法下载到需要的jar包，手动去下载上，然后放入到lib下，然后build path有的时候会感到很不舒服，不是很是不实用。所以此处可以在maven的设置中心添加多个下载仓库，当中央仓库没有的话，继续到下一个仓库去下载。这样丰富了中央仓库的下载地址。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先找到你的Maven的配置文件的位置，然后将下面的代码复制到你的配置文件中：
&amp;gt; 注意将速度比较慢的网址放到后面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mirrors&amp;gt;  
    &amp;lt;!-- mirror  
     | Specifies a repository mirror site to use instead of a given repository. The repository that  
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used  
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.  
     |  
    &amp;lt;mirror&amp;gt;  
      &amp;lt;id&amp;gt;mirrorId&amp;lt;/id&amp;gt;  
      &amp;lt;mirrorOf&amp;gt;repositoryId&amp;lt;/mirrorOf&amp;gt;  
      &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;  
      &amp;lt;url&amp;gt;http://my.repository.com/repo/path&amp;lt;/url&amp;gt;  
    &amp;lt;/mirror&amp;gt;  
     --&amp;gt;  

     &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;nexus-163&amp;lt;/id&amp;gt;
        &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;
        &amp;lt;name&amp;gt;Nexus 163&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://mirrors.163.com/maven/repository/maven-public/&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
    &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
    &amp;lt;/mirror&amp;gt;
    &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;central&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;Maven Repository Switchboard&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://repo1.maven.org/maven2/&amp;lt;/url&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
    &amp;lt;/mirror&amp;gt;
    &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;repo2&amp;lt;/id&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
        &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://repo2.maven.org/maven2/&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
    &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;ibiblio&amp;lt;/id&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
        &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://mirrors.ibiblio.org/pub/mirrors/maven2/&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
    &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;jboss-public-repository-group&amp;lt;/id&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
        &amp;lt;name&amp;gt;JBoss Public Repository Group&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://repository.jboss.org/nexus/content/groups/public&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
    &amp;lt;!-- 中央仓库在中国的镜像 --&amp;gt;
    &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;maven.net.cn&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;oneof the central mirrors in china&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://maven.net.cn/content/groups/public/&amp;lt;/url&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
    &amp;lt;/mirror&amp;gt;
  &amp;lt;/mirrors&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Java中的SSM框架和配置</title>
      <link>https://www.gecore.win/post/201802/java%E4%B8%AD%E7%9A%84ssm%E6%A1%86%E6%9E%B6%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201802/java%E4%B8%AD%E7%9A%84ssm%E6%A1%86%E6%9E%B6%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      
        <description>

&lt;h2 id=&#34;一-什么是ssm框架&#34;&gt;一、什么是SSM框架&lt;/h2&gt;

&lt;p&gt;SSM框架是JavaWeb中常用的框架，包括&lt;code&gt;Spring&lt;/code&gt;、&lt;code&gt;Spring MVC&lt;/code&gt;、&lt;code&gt;Mybatis&lt;/code&gt;三种框架的一个整合。其中任意两个框架都可以相互组合&lt;code&gt;SS框架&lt;/code&gt;、&lt;code&gt;SM&lt;/code&gt;（O(∩_∩)O~）框架（两种情况：&lt;code&gt;Spring + Mybatis&lt;/code&gt;、&lt;code&gt;Spring MVC + Mybatis&lt;/code&gt;）。具体的详细情况可以参考这篇文章&lt;a href=&#39;http://blog.csdn.net/daniel_fei/article/details/56670751&#39; target=&#39;_blank&#39;&gt;&lt;a href=&#34;http://blog.csdn.net/daniel_fei/article/details/56670751&#34;&gt;http://blog.csdn.net/daniel_fei/article/details/56670751&lt;/a&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;框架基本结构&#34;&gt;框架基本结构&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-views&#34;&gt;-       |----controllers  控制器
|       |----dao          dao层
|       |----mapper       mybatis的mapper文件
|--src--|----pojo         简单java对象
|       |----service      服务层
|       |----service.impl 服务实现层
|
|
|               |----jdbc.properties    jdbc配置
|               |----log4j.properties   log4j配置
|-- resources --|----spring-mvc.xml     springmvc配置
|               |----spring-mybatis.xml spring整合mybatis配置
|   
|---|Deployed Resources     部署资源文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201802/imgs/1.png&#34; alt=&#34;图片&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;框架整合过程&#34;&gt;框架整合过程&lt;/h2&gt;

&lt;p&gt;创建一个&lt;code&gt;maven&lt;/code&gt;的网站项目(不要问为什么)，然后按照下面步骤配置。
1. 数据库初始化
&amp;gt; 请预先整理好数据库，我这里使用的MariaDB(mysql)，也可以使用其他数据库。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;--mysql-connctor-java 5.1.32
DROP TABLE IF EXISTS `user_t`;  
  
CREATE TABLE `user_t` (  
  `id` int(11) NOT NULL AUTO_INCREMENT,  
  `user_name` varchar(40) NOT NULL,  
  `password` varchar(255) NOT NULL,  
  `age` int(4) NOT NULL,  
  PRIMARY KEY (`id`)  
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;  
  
insert  into `user_t`(`id`,`user_name`,`password`,`age`) values (1,&#39;测试&#39;,&#39;sfasgfaf&#39;,24);  

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;maven配置文件
&amp;gt; 下面的是maven项目的&lt;code&gt;pom.xml&lt;/code&gt;文件配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;  
        &amp;lt;!-- spring版本号 --&amp;gt;  
        &amp;lt;spring.version&amp;gt;4.0.2.RELEASE&amp;lt;/spring.version&amp;gt;  
        &amp;lt;!-- mybatis版本号 --&amp;gt;  
        &amp;lt;mybatis.version&amp;gt;3.2.6&amp;lt;/mybatis.version&amp;gt;  
        &amp;lt;!-- log4j日志文件管理包版本 --&amp;gt;  
        &amp;lt;slf4j.version&amp;gt;1.7.7&amp;lt;/slf4j.version&amp;gt;  
        &amp;lt;log4j.version&amp;gt;1.2.17&amp;lt;/log4j.version&amp;gt;  
    &amp;lt;/properties&amp;gt;  
    &amp;lt;dependencies&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt;  
            &amp;lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&amp;gt;  
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- spring核心包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-oxm&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- mybatis核心包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${mybatis.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- mybatis/spring包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 导入java ee jar 包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;javax&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;javaee-api&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;7.0&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 导入Mysql数据库链接jar包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;5.1.30&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- JSTL标签类 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;jstl&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 日志文件管理包 --&amp;gt;  
        &amp;lt;!-- log start --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${log4j.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 格式化对象，方便输出日志 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.1.41&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- log end --&amp;gt;  
        &amp;lt;!-- 映入JSON --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.9.13&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;!-- 上传组件包 --&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;1.9&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt; 
    &amp;lt;/dependencies&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;properties配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先是jdbc的配置&lt;code&gt;jdbc.properties&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;driver=com.mysql.jdbc.Driver
url=jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=UTF-8
username=testroot
password=123
#定义初始连接数
initialSize=0
#定义最大连接数
maxActive=20
#定义最大空闲
maxIdle=20
#定义最小空闲
minIdle=1
#定义最长等待时间
maxWait=60000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后是log4j的配置&lt;code&gt;log4j.properties&lt;/code&gt;如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;#定义LOG输出级别
log4j.rootLogger=INFO,Console,File
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n

#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File = logs/springmvcMybist/ssm.log
#定义文件最大大小
log4j.appender.File.MaxFileSize = 10MB
#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold = ALL
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;spring-mybatis整合&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;文件名为&lt;code&gt;spring-mybatis.xml&lt;/code&gt;，注意文件的位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
    xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
    xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&amp;quot;&amp;gt;
    &amp;lt;!-- 这里的 base-package 需要修改，修改为你所需要的即可 --&amp;gt;
    &amp;lt;!-- 自动扫描 --&amp;gt;
    &amp;lt;context:component-scan base-package=&amp;quot;com.mxcms&amp;quot; /&amp;gt;

    &amp;lt;!-- 引入配置文件 --&amp;gt;
    &amp;lt;bean id=&amp;quot;propertyConfigurer&amp;quot;
        class=&amp;quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;location&amp;quot; value=&amp;quot;classpath:jdbc.properties&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;
        destroy-method=&amp;quot;close&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${driver}&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${url}&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${username}&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${password}&amp;quot; /&amp;gt;
        &amp;lt;!-- 初始化连接大小 --&amp;gt;
        &amp;lt;property name=&amp;quot;initialSize&amp;quot; value=&amp;quot;${initialSize}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- 连接池最大数量 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxActive&amp;quot; value=&amp;quot;${maxActive}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- 连接池最大空闲 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxIdle&amp;quot; value=&amp;quot;${maxIdle}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- 连接池最小空闲 --&amp;gt;
        &amp;lt;property name=&amp;quot;minIdle&amp;quot; value=&amp;quot;${minIdle}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- 获取连接最大等待时间 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxWait&amp;quot; value=&amp;quot;${maxWait}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&amp;gt;
    &amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
        &amp;lt;!-- 这里的value需要修改为你的mapper文件位置，注意这里是斜线 / 不是 . --&amp;gt;
        &amp;lt;!-- 自动扫描mapping.xml文件 --&amp;gt;
        &amp;lt;property name=&amp;quot;mapperLocations&amp;quot; value=&amp;quot;classpath:com/mxcms/mapper/*.xml&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- 这里的value需要修改为你的dao文件夹位置 --&amp;gt;
    &amp;lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&amp;gt;
    &amp;lt;bean class=&amp;quot;org.mybatis.spring.mapper.MapperScannerConfigurer&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;basePackage&amp;quot; value=&amp;quot;com.mxcms.dao&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;sqlSessionFactoryBeanName&amp;quot; value=&amp;quot;sqlSessionFactory&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&amp;gt;
    &amp;lt;bean id=&amp;quot;transactionManager&amp;quot;
        class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;maven 自动生成代码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面需要使用maven自动生成工具生成代码，可以&lt;/p&gt;

&lt;p&gt;下载&lt;/p&gt;

&lt;p&gt;压缩包，解压文件，然后按照下面方法进行自动生成代码。&lt;/p&gt;

&lt;p&gt;(1). 准备好你的下面的文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mybatis-3.2.7.jar
mybatis-generator-core-1.3.2.jar
mysql-connector-java-5.1.25-bin.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(2). 修改自动生成代码配置文件&lt;/p&gt;

&lt;p&gt;修改配置文件&lt;code&gt;generatorConfig.xml&lt;/code&gt;的相关内容，准备生成代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;  
&amp;lt;!DOCTYPE generatorConfiguration  
  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;  
  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;  
&amp;lt;generatorConfiguration&amp;gt;  
&amp;lt;!-- 数据库驱动--&amp;gt;  
    &amp;lt;classPathEntry  location=&amp;quot;mysql-connector-java-5.1.25-bin.jar&amp;quot;/&amp;gt;  
    &amp;lt;context id=&amp;quot;DB2Tables&amp;quot;  targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;  
        &amp;lt;commentGenerator&amp;gt;  
            &amp;lt;property name=&amp;quot;suppressDate&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
            &amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;  
            &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
        &amp;lt;/commentGenerator&amp;gt; 
        &amp;lt;!-- 这里的连接字符串需要修改为你的真实可用字符串。 --&amp;gt; 
        &amp;lt;!--数据库链接URL，用户名、密码 --&amp;gt;  
        &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot; connectionURL=&amp;quot;jdbc:mysql://127.0.0.1/mybatis&amp;quot; userId=&amp;quot;testroot&amp;quot; password=&amp;quot;123&amp;quot;&amp;gt;  
        &amp;lt;/jdbcConnection&amp;gt;  
        &amp;lt;javaTypeResolver&amp;gt;  
            &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;
        &amp;lt;/javaTypeResolver&amp;gt;  
        &amp;lt;!-- 这里需要修改这个文件夹名称 --&amp;gt;
        &amp;lt;!-- 生成模型的包名和位置--&amp;gt;
        &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.mxcms.pojo&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;  &amp;lt;!--这个targetPackage需要修改--&amp;gt;
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
            &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
        &amp;lt;/javaModelGenerator&amp;gt;  
        &amp;lt;!--这个targetPackage需要修改--&amp;gt;
        &amp;lt;!-- 生成映射文件的包名和位置--&amp;gt;  
        &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.mxcms.mapper&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;  
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;  
        &amp;lt;/sqlMapGenerator&amp;gt;  
        &amp;lt;!--这个targetPackage需要修改--&amp;gt;
        &amp;lt;!-- 生成DAO的包名和位置--&amp;gt;  
        &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot; targetPackage=&amp;quot;com.mxcms.dao&amp;quot; targetProject=&amp;quot;src&amp;quot;&amp;gt;  
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/javaClientGenerator&amp;gt;  
        &amp;lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&amp;gt;  
        &amp;lt;table tableName=&amp;quot;user_t&amp;quot; domainObjectName=&amp;quot;User&amp;quot; enableCountByExample=&amp;quot;false&amp;quot; enableUpdateByExample=&amp;quot;false&amp;quot; enableDeleteByExample=&amp;quot;false&amp;quot; enableSelectByExample=&amp;quot;false&amp;quot; selectByExampleQueryId=&amp;quot;false&amp;quot;&amp;gt;&amp;lt;/table&amp;gt;
    &amp;lt;/context&amp;gt;  
&amp;lt;/generatorConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3). 制作一个bat脚本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;IF NOT EXIST &amp;quot;src&amp;quot; MD &amp;quot;src&amp;quot;

java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite

pause();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(4). 生成代码&lt;/p&gt;

&lt;p&gt;将上面的所有文件放到一个文件夹中，然后运行bat文件，将会自动生成代码。
&amp;gt; 注意:表配置请务必一次写完，虽然中途仍然可以自动生成并复制，建议一次性设计好数据库和关系。&lt;/p&gt;

&lt;p&gt;(5). 复制代码&lt;/p&gt;

&lt;p&gt;将上面的所有代码复制到&lt;code&gt;src/main/java&lt;/code&gt;下面即可。
&amp;gt; 一个错误信息：&lt;/p&gt;

&lt;p&gt;你或许会遇到下面的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先检验一下你的路径是否正确，如果确保路径正确，可以尝试将&lt;code&gt;mapper&lt;/code&gt;文件夹放到&lt;code&gt;resource&lt;/code&gt;中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;实现service&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;到此为止dao层做好了，下面开始做服务层。&lt;/p&gt;

&lt;p&gt;(1) 创建service接口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IUserService {
    public User getUserById(int userId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(2). 实现接口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service(&amp;quot;userService&amp;quot;)
public class UserService implements IUserService {
    @Resource
    private UserMapper userDao;
    public User getUserById(int userId) {
        return this.userDao.selectByPrimaryKey(userId);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;到了这一步恭喜你&lt;code&gt;spring + mybatis&lt;/code&gt;已经做好了，可以开始测试了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(SpringJUnit4ClassRunner.class) // 表示继承了SpringJUnit4ClassRunner类
@ContextConfiguration(locations = { &amp;quot;classpath:spring-mybatis.xml&amp;quot; })

public class TestMyBatis {
    private static Logger logger = Logger.getLogger(TestMyBatis.class);
    // private ApplicationContext ac = null;
    @Resource
    private IUserService userService = null;

    // @Before
    // public void before() {
    // ac = new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);
    // userService = (IUserService) ac.getBean(&amp;quot;userService&amp;quot;);
    // }

    @Test
    public void test() {
        User user = userService.getUserById(1);
        // System.out.println(user.getUserName());
        // logger.info(&amp;quot;值：&amp;quot;+user.getUserName());
        logger.info(JSON.toJSONString(user));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面右键&lt;code&gt;debug as junit&lt;/code&gt;，如果看到你的数据库的用户信息打印出来了，恭喜你。初步整合成功，如果报错好好看看步骤，然后认真跟着错误修改一下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ssm整合&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;经过上面的战斗，你已经完成&lt;code&gt;spring + mybatis&lt;/code&gt;的整合，下面就会变得很简单。 配置&lt;code&gt;spring.xml&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
    xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
    xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans  
                            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                            http://www.springframework.org/schema/context  
                            http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                            http://www.springframework.org/schema/mvc  
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&amp;quot;&amp;gt;

    &amp;lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&amp;gt;
    &amp;lt;bean id=&amp;quot;mappingJacksonHttpMessageConverter&amp;quot;
        class=&amp;quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;supportedMediaTypes&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&amp;gt;
    &amp;lt;bean
        class=&amp;quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;messageConverters&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;ref bean=&amp;quot;mappingJacksonHttpMessageConverter&amp;quot; /&amp;gt;    &amp;lt;!-- JSON转换器 --&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 对静态资源的访问 --&amp;gt;
    &amp;lt;!-- &amp;lt;mvc:resources mapping=&amp;quot;/js/**&amp;quot; location=&amp;quot;/js/&amp;quot; /&amp;gt; &amp;lt;mvc:resources mapping=&amp;quot;/css/**&amp;quot; 
        location=&amp;quot;/css/&amp;quot; /&amp;gt; --&amp;gt;

    &amp;lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&amp;gt;
    &amp;lt;context:component-scan base-package=&amp;quot;com.mxcms.controller&amp;quot; /&amp;gt;
    &amp;lt;!-- 添加注解驱动 --&amp;gt;
    &amp;lt;mvc:annotation-driven enable-matrix-variables=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;!-- 允许对静态资源文件的访问 --&amp;gt;
    &amp;lt;mvc:default-servlet-handler /&amp;gt;
    &amp;lt;!-- 定义跳转的文件的前后缀 ，视图模式配置 --&amp;gt;
    &amp;lt;bean
        class=&amp;quot;org.springframework.web.servlet.view.InternalResourceViewResolver&amp;quot;&amp;gt;
        &amp;lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&amp;gt;
        &amp;lt;property name=&amp;quot;prefix&amp;quot; value=&amp;quot;/WEB-INF/views/&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;suffix&amp;quot; value=&amp;quot;.jsp&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&amp;gt;
    &amp;lt;bean id=&amp;quot;multipartResolver&amp;quot;
        class=&amp;quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&amp;quot;&amp;gt;
        &amp;lt;!-- 默认编码 --&amp;gt;
        &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot; /&amp;gt;
        &amp;lt;!-- 文件大小最大值 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxUploadSize&amp;quot; value=&amp;quot;10485760000&amp;quot; /&amp;gt;
        &amp;lt;!-- 内存中的最大值 --&amp;gt;
        &amp;lt;property name=&amp;quot;maxInMemorySize&amp;quot; value=&amp;quot;40960&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;web.xml整合&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
    xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
    version=&amp;quot;3.0&amp;quot;&amp;gt;
    &amp;lt;display-name&amp;gt;Archetype Created Web Application&amp;lt;/display-name&amp;gt;
    
    &amp;lt;!-- Spring和mybatis的配置文件 --&amp;gt;
    &amp;lt;context-param&amp;gt;
        &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;classpath:spring-mybatis.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/context-param&amp;gt;
    
    &amp;lt;!-- 编码过滤器 --&amp;gt;
    &amp;lt;filter&amp;gt;
        &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt;
        &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;UTF-8&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
    &amp;lt;/filter&amp;gt;
    &amp;lt;filter-mapping&amp;gt;
        &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/filter-mapping&amp;gt;
    
    &amp;lt;!-- Spring监听器 --&amp;gt;
    &amp;lt;listener&amp;gt;
        &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
    &amp;lt;/listener&amp;gt;
    
    &amp;lt;!-- 防止Spring内存溢出监听器 --&amp;gt;
    &amp;lt;listener&amp;gt;
        &amp;lt;listener-class&amp;gt;org.springframework.web.util.IntrospectorCleanupListener&amp;lt;/listener-class&amp;gt;
    &amp;lt;/listener&amp;gt;
    
    &amp;lt;!-- Spring MVC servlet --&amp;gt;
    &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;SpringMVC&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;classpath:spring-mvc.xml&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
        &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
        &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;
    &amp;lt;/servlet&amp;gt;
    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;SpringMVC&amp;lt;/servlet-name&amp;gt;
        &amp;lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&amp;gt;
        &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
    
    &amp;lt;welcome-file-list&amp;gt;
        &amp;lt;welcome-file&amp;gt;/index.html&amp;lt;/welcome-file&amp;gt;
        &amp;lt;welcome-file&amp;gt;/index.jsp&amp;lt;/welcome-file&amp;gt;
    &amp;lt;/welcome-file-list&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;controllers编写配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编写controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Controller
@RequestMapping(&amp;quot;/user&amp;quot;)
public class UserController {
    @Resource
    private IUserService userService;
    @RequestMapping(&amp;quot;/showUser&amp;quot;)
    public String toIndex(HttpServletRequest request, Model model) {
        int userId = Integer.parseInt(request.getParameter(&amp;quot;id&amp;quot;));
        User user = this.userService.getUserById(userId);
        model.addAttribute(&amp;quot;user&amp;quot;, user);
        return &amp;quot;User&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://pan.lanzou.com/1378060&#34;&gt;https://pan.lanzou.com/1378060&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Dynamic_Web_Module_3.0_require_1.6_or_newer</title>
      <link>https://www.gecore.win/post/201802/dynamic_web_module_3.0_require_1.6_or_newer/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201802/dynamic_web_module_3.0_require_1.6_or_newer/</guid>
      
        <description>

&lt;h2 id=&#34;动态网站模块错误&#34;&gt;动态网站模块错误&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gitee.com/Gecore/muxuanuser.github.io/raw/master/content/post/201802/imgs/201802272217.png&#34; alt=&#34;错误&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Dynamic Web Module 3.0 Require 1.6 Or Newer。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改&lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;build&amp;gt;  
        &amp;lt;plugins&amp;gt;  
            &amp;lt;plugin&amp;gt;  
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;  
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;  
                &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;  
                &amp;lt;configuration&amp;gt;  
                    &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;  
                    &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;  
                &amp;lt;/configuration&amp;gt;  
            &amp;lt;/plugin&amp;gt;  
        &amp;lt;/plugins&amp;gt;  
    &amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Java 使用 JAXB处理XML文件</title>
      <link>https://www.gecore.win/post/201801/%E4%BD%BF%E7%94%A8jaxb%E5%A4%84%E7%90%86xml%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201801/%E4%BD%BF%E7%94%A8jaxb%E5%A4%84%E7%90%86xml%E6%96%87%E4%BB%B6/</guid>
      
        <description>

&lt;h2 id=&#34;使用jaxb处理xml文件&#34;&gt;使用JAXB处理XML文件&lt;/h2&gt;

&lt;p&gt;JAXB（Java Architecture for XML Binding) 是一个业界的标准，是一项可以根据XML Schema产生Java类的技术。该过程中，JAXB也提供了将XML实例文档反向生成Java对象树的方法，并能将Java对象树的内容重新写到XML实例文档。从另一方面来讲，JAXB提供了快速而简便的方法将XML模式绑定到Java表示，从而使得Java开发者在Java应用程序中能方便地结合XML数据和处理函数。
&amp;gt; 关键字：&lt;code&gt;JAXB&lt;/code&gt; , &lt;code&gt;Java&lt;/code&gt; , &lt;code&gt;Serialize&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;一个案例&#34;&gt;一个案例&lt;/h2&gt;

&lt;h4 id=&#34;model&#34;&gt;model&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//AllProductLevels 模型
package com.serializations.model;

import java.util.ArrayList;
import java.util.Iterator;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name=&amp;quot;AllProductLevels&amp;quot;)
public class AllProductLevels {
    @Override
    public String toString() {
        String result = &amp;quot;&amp;quot;;
        
        for (Level level : children) {
            result += level.toString() + &amp;quot;    &amp;quot;;
        }
        
        return result;
    }

    @XmlElement(name = &amp;quot;level&amp;quot;, required = true)
    private ArrayList&amp;lt;Level&amp;gt; children;

    public ArrayList&amp;lt;Level&amp;gt; getChildren() {
        return children;
    }

    public void setChildren(ArrayList&amp;lt;Level&amp;gt; childs) {
        children = childs;
    }
}

//Level 模型
package com.serializations.model;

import java.util.ArrayList;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name=&amp;quot;level&amp;quot;)
public class Level {
    @XmlAttribute(name = &amp;quot;id&amp;quot;, required = true)
    private String id;

    @Override
    public String toString() {
        return &amp;quot;Level [id=&amp;quot; + id + &amp;quot;, name=&amp;quot; + name + &amp;quot;, lev=&amp;quot; + lev + &amp;quot;, children=&amp;quot; + children + &amp;quot;]&amp;quot;;
    }

    @XmlAttribute(name = &amp;quot;name&amp;quot;, required = true)
    private String name;
    
    @XmlAttribute(name = &amp;quot;lev&amp;quot;, required = true)
    private String lev;
    @XmlElement(name = &amp;quot;level&amp;quot;, required = true)
    private ArrayList&amp;lt;Level&amp;gt; children;

    public String getLev() {
        return lev;
    }

    public void setLev(String lev) {
        this.lev = lev;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ArrayList&amp;lt;Level&amp;gt; getChildren() {
        return children;
    }

    public void setChildren(ArrayList&amp;lt;Level&amp;gt; child) {
        this.children = child;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建好模型之后开始使用帮助工具，该工具可以方便Java对象和XML字符串之间相互转换，具体细节如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.serializations.util;

import java.io.StringReader;  
import java.io.StringWriter;  
  
import javax.xml.bind.JAXBContext;  
import javax.xml.bind.Marshaller;  
import javax.xml.bind.Unmarshaller; 

public class JAXBUtil {
     /** 
     * JavaBean转换成xml 
     * 默认编码UTF-8 
     * @param obj 
     * @param writer 
     * @return  
     */  
    public static String convertToXml(Object obj) {  
        return convertToXml(obj, &amp;quot;UTF-8&amp;quot;);  
    }  
  
    /** 
     * JavaBean转换成xml 
     * @param obj 
     * @param encoding  
     * @return  
     */  
    public static String convertToXml(Object obj, String encoding) {  
        String result = null;  
        try {  
            JAXBContext context = JAXBContext.newInstance(obj.getClass());  
            Marshaller marshaller = context.createMarshaller();  
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);  
            marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);  
  
            StringWriter writer = new StringWriter();  
            marshaller.marshal(obj, writer);  
            result = writer.toString();  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
  
        return result;  
    }  
  
    /** 
     * xml转换成JavaBean 
     * @param xml 
     * @param c 
     * @return 
     */  
    @SuppressWarnings(&amp;quot;unchecked&amp;quot;)  
    public static &amp;lt;T&amp;gt; T converyToJavaBean(String xml, Class&amp;lt;T&amp;gt; c) {  
        T t = null;  
        try {  
            JAXBContext context = JAXBContext.newInstance(c);  
            Unmarshaller unmarshaller = context.createUnmarshaller();  
            t = (T) unmarshaller.unmarshal(new StringReader(xml));  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
  
        return t;  
    }  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转换案例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.serializations.controller;

import java.awt.List;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import com.serializations.model.AllProductLevels;
import com.serializations.model.Level;
import com.serializations.util.JAXBUtil;

public class JAXBController {
    public void serialize() {
        ArrayList&amp;lt;Level&amp;gt; children = new ArrayList&amp;lt;Level&amp;gt;();

        Level level = new Level();
        level.setId(&amp;quot;1&amp;quot;);
        level.setName(&amp;quot;张三&amp;quot;);
        level.setLev(&amp;quot;1&amp;quot;);

        Level level2 = new Level();
        level2.setId(&amp;quot;1&amp;quot;);
        level2.setName(&amp;quot;李四&amp;quot;);
        level2.setLev(&amp;quot;2&amp;quot;);
        level2.setChildren(null);

        Level level3 = new Level();
        level3.setId(&amp;quot;2&amp;quot;);
        level3.setName(&amp;quot;李四22&amp;quot;);
        level3.setLev(&amp;quot;2&amp;quot;);
        level3.setChildren(null);

        Level level4 = new Level();
        level4.setId(&amp;quot;3&amp;quot;);
        level4.setName(&amp;quot;李四23&amp;quot;);
        level4.setLev(&amp;quot;2&amp;quot;);
        level4.setChildren(null);

        ArrayList&amp;lt;Level&amp;gt; list = new ArrayList&amp;lt;Level&amp;gt;();
        list.add(level2);
        list.add(level3);
        list.add(level4);
        level.setChildren(list);

        Level level5 = new Level();
        level5.setId(&amp;quot;2&amp;quot;);
        level5.setName(&amp;quot;李四&amp;quot;);
        level5.setLev(&amp;quot;1&amp;quot;);
        level5.setChildren(null);

        children.add(level);
        children.add(level5);

        AllProductLevels levels = new AllProductLevels();
        levels.setChildren(children);

        String str = JAXBUtil.convertToXml(levels);
        System.out.println(str);
    }

    public void deSerialize() {
        String xml = &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot; standalone=\&amp;quot;yes\&amp;quot;?&amp;gt;&amp;quot; + &amp;quot;&amp;lt;AllProductLevels&amp;gt;&amp;quot;
                + &amp;quot;&amp;lt;level id=\&amp;quot;1\&amp;quot; name=\&amp;quot;张三\&amp;quot; lev=\&amp;quot;1\&amp;quot;&amp;gt;&amp;quot; + &amp;quot;&amp;lt;level id=\&amp;quot;1\&amp;quot; name=\&amp;quot;李四\&amp;quot; lev=\&amp;quot;2\&amp;quot;/&amp;gt;&amp;quot;
                + &amp;quot;&amp;lt;level id=\&amp;quot;2\&amp;quot; name=\&amp;quot;李四22\&amp;quot; lev=\&amp;quot;2\&amp;quot;/&amp;gt;&amp;quot; + &amp;quot;&amp;lt;level id=\&amp;quot;3\&amp;quot; name=\&amp;quot;李四23\&amp;quot; lev=\&amp;quot;2\&amp;quot;/&amp;gt;&amp;quot; + &amp;quot;&amp;lt;/level&amp;gt;&amp;quot;
                + &amp;quot;&amp;lt;level id=\&amp;quot;2\&amp;quot; name=\&amp;quot;李四\&amp;quot; lev=\&amp;quot;1\&amp;quot;/&amp;gt;&amp;quot; + &amp;quot;&amp;lt;/AllProductLevels&amp;gt;&amp;quot;;
        
        AllProductLevels levels = (AllProductLevels)JAXBUtil.converyToJavaBean(xml, AllProductLevels.class);
        System.out.println(levels);
    }

    public void deSerializeFromFile() throws Exception{
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(&amp;quot;AllProduct.xml&amp;quot;),&amp;quot;UTF-8&amp;quot;));
        String data = null;
        String result = &amp;quot;&amp;quot;;
        while((data = reader.readLine()) != null) result += data;
        
        System.out.println(result);
        
        AllProductLevels levels = (AllProductLevels)JAXBUtil.converyToJavaBean(result, AllProductLevels.class);
        
        System.out.println(levels.getChildren().get(0).getName());
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;AllProductLevels&amp;gt;
    &amp;lt;level id=&amp;quot;1&amp;quot; name=&amp;quot;张三&amp;quot; lev=&amp;quot;1&amp;quot;&amp;gt;
        &amp;lt;level id=&amp;quot;1&amp;quot; name=&amp;quot;李四&amp;quot; lev=&amp;quot;2&amp;quot;/&amp;gt;
        &amp;lt;level id=&amp;quot;2&amp;quot; name=&amp;quot;李四22&amp;quot; lev=&amp;quot;2&amp;quot;/&amp;gt;
        &amp;lt;level id=&amp;quot;3&amp;quot; name=&amp;quot;李四23&amp;quot; lev=&amp;quot;2&amp;quot;/&amp;gt;
    &amp;lt;/level&amp;gt;
    &amp;lt;level id=&amp;quot;2&amp;quot; name=&amp;quot;李四&amp;quot; lev=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;/AllProductLevels&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Level [id=1, name=张三, lev=1, children=[Level [id=1, name=李四, lev=2, children=null], Level [id=2, name=李四22, lev=2, children=null], Level [id=3, name=李四23, lev=2, children=null]]]    Level [id=2, name=李四, lev=1, children=null]    
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>ionic3构建过程中遇到找不到AndroidManifest.xml</title>
      <link>https://www.gecore.win/post/201802/ionic3%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E6%89%BE%E4%B8%8D%E5%88%B0androidmanifest.xml%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201802/ionic3%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E6%89%BE%E4%B8%8D%E5%88%B0androidmanifest.xml%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      
        <description>&lt;p&gt;构建Ionic时候有时候会遇到下面问题：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-error&#34;&gt;Failed to install &#39;ionic-plugin-keyboard&#39;: Error: ENOENT: no such file or directory, open &#39;/Users/theo/Projects/mobile/platforms/android/AndroidManifest.xml&#39;
    at Object.fs.openSync (fs.js:651:18)
    at Object.fs.readFileSync (fs.js:553:33)
    at Object.parseElementtreeSync (/Users/theo/Projects/mobile/platforms/android/cordova/node_modules/cordova-common/src/util/xml-helpers.js:180:27)
    at new AndroidManifest (/Users/theo/Projects/mobile/platforms/android/cordova/lib/AndroidManifest.js:29:20)
    at AndroidProject.getPackageName (/Users/theo/Projects/mobile/platforms/android/cordova/lib/AndroidProject.js:99:12)
    at Api.addPlugin (/Users/theo/Projects/mobile/platforms/android/cordova/Api.js:223:57)
    at handleInstall (/Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/cordova-lib/src/plugman/install.js:594:10)
    at /Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/cordova-lib/src/plugman/install.js:357:28
    at _fulfilled (/Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/q/q.js:787:54)
    at self.promiseDispatch.done (/Users/theo/.nvm/versions/node/v8.1.2/lib/node_modules/cordova/node_modules/q/q.js:816:30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个问题的原因就是新版本的cordova 7.0.0及以上版本对于新的AndroidManifest.xml路径还没有更新，导致找不到AndroidManifest.xml，下面给出两个解决办法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用原先的cordova&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm uninstall -g cordova
npm install -g cordova@6.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;重新布置安卓项目&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cordova platform rm android
cordova platform add android
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Cordova官方给出的解决办法
修改&lt;code&gt;config.xml&lt;/code&gt;文件，具体可以查看网址&lt;a href=&#39;https://cordova.apache.org/announcements/2017/12/04/cordova-android-7.0.0.html&#39; target=&#39;_blank&#39;&gt;&lt;a href=&#34;https://cordova.apache.org/announcements/2017/12/04/cordova-android-7.0.0.html&#34;&gt;https://cordova.apache.org/announcements/2017/12/04/cordova-android-7.0.0.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- An existing config.xml --&amp;gt;
&amp;lt;edit-config file=&amp;quot;AndroidManifest.xml&amp;quot; target=&amp;quot;/manifest/application&amp;quot; mode=&amp;quot;merge&amp;quot;&amp;gt;

&amp;lt;!-- needs to change to --&amp;gt;
&amp;lt;edit-config file=&amp;quot;app/src/main/AndroidManifest.xml&amp;quot; target=&amp;quot;/manifest/application&amp;quot; mode=&amp;quot;merge&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>专栏</title>
      <link>https://www.gecore.win/column/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/column/</guid>
      
        <description>

&lt;h2 id=&#34;专栏&#34;&gt;专栏&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;这个页面是博客文章专栏导航&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gecore.win/post/201804/asp_net_core/&#34;&gt;ASP.NET Core 专栏&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>在线工具</title>
      <link>https://www.gecore.win/online/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/online/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;这个页面的工具是博主自己常用的收藏，仅提供个人备份使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;【编辑器】&lt;a href=&#34;https://www.zybuluo.com/mdeditor&#34;&gt;Markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【开发工具】&lt;a href=&#34;https://www.bejson.com/&#34;&gt;Json&lt;/a&gt;|&lt;a href=&#34;http://tool.oschina.net/regex/&#34;&gt;正则表达式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【办公】&lt;a href=&#34;http://www.uupoop.com/&#34;&gt;在线ps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【工具】&lt;a href=&#34;https://tool.lu/&#34;&gt;Tools&lt;/a&gt;|&lt;a href=&#34;http://tool.oschina.net/&#34;&gt;OSChina&lt;/a&gt; | &lt;a href=&#34;http://tools.jb51.net/&#34;&gt;脚本之家&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>常用工具</title>
      <link>https://www.gecore.win/links/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/links/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;这个页面的软件是博主自己常用的收藏，仅提供个人备份使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;【资料】&lt;a href=&#34;https://www.appinn.com/markdown/&#34;&gt;MarkDown&lt;/a&gt; | &lt;a href=&#34;https://mirrors.lucoder.com&#34;&gt;牧轩镜像&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【.NET网站】 &lt;a href=&#34;http://www.ikende.com/&#34;&gt;IKende&lt;/a&gt; | &lt;a href=&#34;https://www.connectionstrings.com/&#34;&gt;ConnectStrings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【开发工具】&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; | &lt;a href=&#34;https://www.eclipse.org/downloads/download.php?file=/oomph/epp/oxygen/R2/eclipse-inst-win64.exe&#34;&gt;Eclipse&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>常用工具</title>
      <link>https://www.gecore.win/tools/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/tools/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;这个页面的软件是博主自己常用的收藏，仅提供个人备份使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>ionic 操作http</title>
      <link>https://www.gecore.win/post/201712/ionic%E6%93%8D%E4%BD%9Chttp/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201712/ionic%E6%93%8D%E4%BD%9Chttp/</guid>
      
        <description>

&lt;h2 id=&#34;http技术&#34;&gt;Http技术：&lt;/h2&gt;

&lt;p&gt;http请求是客户端请求api使用的一项非常重要的技术，主要有下面几种方法。&lt;/p&gt;

&lt;h4 id=&#34;使用native组件&#34;&gt;使用Native组件&lt;/h4&gt;

&lt;p&gt;这种方法是一种和原生交互行最强的一种方法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://ionicframework.com/docs/native/http/&#34;&gt;https://ionicframework.com/docs/native/http/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ionic cordova plugin add cordova-plugin-advanced-http
$ npm install --save @ionic-native/http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { HTTP } from &#39;@ionic-native/http&#39;;

constructor(private http: HTTP) { }

this.http.get(&#39;http://ionic.io&#39;, {}, {})
  .then(data =&amp;gt; {
    console.log(data.status);
    console.log(data.data); // data received by server
    console.log(data.headers);
  })
  .catch(error =&amp;gt; {
    console.log(error.status);
    console.log(error.error); // error message as string
    console.log(error.headers);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;使用angular自带的http组件-推荐&#34;&gt;使用Angular自带的http组件（推荐）&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;从 @angular/http 模块中导入 Http 类&lt;/li&gt;
&lt;li&gt;导入 RxJS 中的 map 操作符&lt;/li&gt;
&lt;li&gt;使用 DI 方式注入 http 服务&lt;/li&gt;
&lt;li&gt;调用 http 服务的 get() 方法，设置请求地址并发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;调用 Response 对象的 json() 方法，把响应体转成 JSON 对象&lt;/li&gt;
&lt;li&gt;把请求的结果，赋值给 members 属性&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Component, OnInit } from &#39;@angular/core&#39;;
import { Http } from &#39;@angular/http&#39;; // (1)
import &#39;rxjs/add/operator/map&#39;; // (2)
interface Member {
  id: string;
  login: string;
  avatar_url: string;
}
@Component({
  selector: &#39;exe-app&#39;,
  template: `
    &amp;lt;h3&amp;gt;Angular Orgs Members&amp;lt;/h3&amp;gt;
    &amp;lt;ul *ngIf=&amp;quot;members&amp;quot;&amp;gt;
      &amp;lt;li *ngFor=&amp;quot;let member of members;&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;img [src]=&amp;quot;member.avatar_url&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot;/&amp;gt;
          ID：&amp;lt;span&amp;gt;{{member.id}}&amp;lt;/span&amp;gt;
          Name: &amp;lt;span&amp;gt;{{member.login}}&amp;lt;/span&amp;gt;
        &amp;lt;/p&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  `
})
export class AppComponent implements OnInit {
  members: Member[];
  constructor(private http: Http) { } // (3)
  ngOnInit() {
    this.http.get(`https://api.github.com/orgs/angular/members?page=1&amp;amp;per_page=5`) // (4)
      .map(res =&amp;gt; res.json()) // (5)
      .subscribe(data =&amp;gt; {
        if (data) this.members = data; // (6)
      });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体内容和步骤请到这里查看：&lt;a href=&#34;https://segmentfault.com/a/1190000009028150?utm_source=tuicool&amp;amp;utm_medium=referral#articleHeader2&#34;&gt;https://segmentfault.com/a/1190000009028150?utm_source=tuicool&amp;amp;utm_medium=referral#articleHeader2&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;使用jquery的http组件-不太推荐的方法&#34;&gt;使用JQuery的http组件（不太推荐的方法）&lt;/h4&gt;

&lt;p&gt;如果你不熟悉上述的方法，也可以使用JQuery，&lt;code&gt;但是我们并不推荐使用这种方法&lt;/code&gt;，ionic是混合开发的框架，当然兼容JQuery。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;引入JQuery脚本&lt;/li&gt;
&lt;li&gt;使用JQuery 的Ajax&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>树莓派部署Node环境</title>
      <link>https://www.gecore.win/post/201802/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85node/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.gecore.win/post/201802/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85node/</guid>
      
        <description>

&lt;h2 id=&#34;树莓派安装node环境&#34;&gt;树莓派安装node环境&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;下载node包
&amp;gt; &lt;a href=&#34;https://npm.taobao.org/mirrors/node/&#34;&gt;https://npm.taobao.org/mirrors/node/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我选择的是&lt;code&gt;node-v9.5.0-linux-armv7l.tar.gz&lt;/code&gt;，当然可以选择其他版本，但是注意是&lt;code&gt;arm版本&lt;/code&gt;即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;wget https://npm.taobao.org/mirrors/node/v9.5.0/node-v9.5.0-linux-armv7l.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;解压node包&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;tar -zxvf node-v9.5.0-linux-armv7l.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;复制到&lt;code&gt;/usr/&lt;/code&gt;目录里面&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;sudo cp -rvi node-v9.5.0-linux-armv7l /usr/
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;添加链接&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先切换到&lt;code&gt;/usr/bin&lt;/code&gt;目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;sudo ln -s ../node-v9.5.0-linux-armv7l/lib/node_modules/npm/bin/npm-cli.js
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;测试结果
&lt;code&gt;code
pi@raspberrypi:~ $ npm -v
5.6.0
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>